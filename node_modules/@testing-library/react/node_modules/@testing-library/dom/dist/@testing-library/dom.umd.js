(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
	typeof define === 'function' && define.amd ? define(['exports'], factory) :
	(global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.TestingLibraryDom = {}));
})(this, (function (exports) { 'use strict';

	function _mergeNamespaces(n, m) {
		m.forEach(function (e) {
			e && typeof e !== 'string' && !Array.isArray(e) && Object.keys(e).forEach(function (k) {
				if (k !== 'default' && !(k in n)) {
					var d = Object.getOwnPropertyDescriptor(e, k);
					Object.defineProperty(n, k, d.get ? d : {
						enumerable: true,
						get: function () { return e[k]; }
					});
				}
			});
		});
		return Object.freeze(n);
	}

	var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

	function getAugmentedNamespace(n) {
		if (n.__esModule) return n;
		var a = Object.defineProperty({}, '__esModule', {value: true});
		Object.keys(n).forEach(function (k) {
			var d = Object.getOwnPropertyDescriptor(n, k);
			Object.defineProperty(a, k, d.get ? d : {
				enumerable: true,
				get: function () {
					return n[k];
				}
			});
		});
		return a;
	}

	var build = {};

	var ansiStyles = {exports: {}};

	(function (module) {

	  const ANSI_BACKGROUND_OFFSET = 10;
	  const wrapAnsi256 = function (offset) {
	    if (offset === void 0) {
	      offset = 0;
	    }
	    return code => "\x1B[" + (38 + offset) + ";5;" + code + "m";
	  };
	  const wrapAnsi16m = function (offset) {
	    if (offset === void 0) {
	      offset = 0;
	    }
	    return (red, green, blue) => "\x1B[" + (38 + offset) + ";2;" + red + ";" + green + ";" + blue + "m";
	  };
	  function assembleStyles() {
	    const codes = new Map();
	    const styles = {
	      modifier: {
	        reset: [0, 0],
	        // 21 isn't widely supported and 22 does the same thing
	        bold: [1, 22],
	        dim: [2, 22],
	        italic: [3, 23],
	        underline: [4, 24],
	        overline: [53, 55],
	        inverse: [7, 27],
	        hidden: [8, 28],
	        strikethrough: [9, 29]
	      },
	      color: {
	        black: [30, 39],
	        red: [31, 39],
	        green: [32, 39],
	        yellow: [33, 39],
	        blue: [34, 39],
	        magenta: [35, 39],
	        cyan: [36, 39],
	        white: [37, 39],
	        // Bright color
	        blackBright: [90, 39],
	        redBright: [91, 39],
	        greenBright: [92, 39],
	        yellowBright: [93, 39],
	        blueBright: [94, 39],
	        magentaBright: [95, 39],
	        cyanBright: [96, 39],
	        whiteBright: [97, 39]
	      },
	      bgColor: {
	        bgBlack: [40, 49],
	        bgRed: [41, 49],
	        bgGreen: [42, 49],
	        bgYellow: [43, 49],
	        bgBlue: [44, 49],
	        bgMagenta: [45, 49],
	        bgCyan: [46, 49],
	        bgWhite: [47, 49],
	        // Bright color
	        bgBlackBright: [100, 49],
	        bgRedBright: [101, 49],
	        bgGreenBright: [102, 49],
	        bgYellowBright: [103, 49],
	        bgBlueBright: [104, 49],
	        bgMagentaBright: [105, 49],
	        bgCyanBright: [106, 49],
	        bgWhiteBright: [107, 49]
	      }
	    };

	    // Alias bright black as gray (and grey)
	    styles.color.gray = styles.color.blackBright;
	    styles.bgColor.bgGray = styles.bgColor.bgBlackBright;
	    styles.color.grey = styles.color.blackBright;
	    styles.bgColor.bgGrey = styles.bgColor.bgBlackBright;
	    for (const [groupName, group] of Object.entries(styles)) {
	      for (const [styleName, style] of Object.entries(group)) {
	        styles[styleName] = {
	          open: "\x1B[" + style[0] + "m",
	          close: "\x1B[" + style[1] + "m"
	        };
	        group[styleName] = styles[styleName];
	        codes.set(style[0], style[1]);
	      }
	      Object.defineProperty(styles, groupName, {
	        value: group,
	        enumerable: false
	      });
	    }
	    Object.defineProperty(styles, 'codes', {
	      value: codes,
	      enumerable: false
	    });
	    styles.color.close = '\u001B[39m';
	    styles.bgColor.close = '\u001B[49m';
	    styles.color.ansi256 = wrapAnsi256();
	    styles.color.ansi16m = wrapAnsi16m();
	    styles.bgColor.ansi256 = wrapAnsi256(ANSI_BACKGROUND_OFFSET);
	    styles.bgColor.ansi16m = wrapAnsi16m(ANSI_BACKGROUND_OFFSET);

	    // From https://github.com/Qix-/color-convert/blob/3f0e0d4e92e235796ccb17f6e85c72094a651f49/conversions.js
	    Object.defineProperties(styles, {
	      rgbToAnsi256: {
	        value: (red, green, blue) => {
	          // We use the extended greyscale palette here, with the exception of
	          // black and white. normal palette only has 4 greyscale shades.
	          if (red === green && green === blue) {
	            if (red < 8) {
	              return 16;
	            }
	            if (red > 248) {
	              return 231;
	            }
	            return Math.round((red - 8) / 247 * 24) + 232;
	          }
	          return 16 + 36 * Math.round(red / 255 * 5) + 6 * Math.round(green / 255 * 5) + Math.round(blue / 255 * 5);
	        },
	        enumerable: false
	      },
	      hexToRgb: {
	        value: hex => {
	          const matches = /(?<colorString>[a-f\d]{6}|[a-f\d]{3})/i.exec(hex.toString(16));
	          if (!matches) {
	            return [0, 0, 0];
	          }
	          let {
	            colorString
	          } = matches.groups;
	          if (colorString.length === 3) {
	            colorString = colorString.split('').map(character => character + character).join('');
	          }
	          const integer = Number.parseInt(colorString, 16);
	          return [integer >> 16 & 0xFF, integer >> 8 & 0xFF, integer & 0xFF];
	        },
	        enumerable: false
	      },
	      hexToAnsi256: {
	        value: hex => styles.rgbToAnsi256(...styles.hexToRgb(hex)),
	        enumerable: false
	      }
	    });
	    return styles;
	  }

	  // Make the export immutable
	  Object.defineProperty(module, 'exports', {
	    enumerable: true,
	    get: assembleStyles
	  });
	})(ansiStyles);

	var collections = {};

	Object.defineProperty(collections, '__esModule', {
	  value: true
	});
	collections.printIteratorEntries = printIteratorEntries;
	collections.printIteratorValues = printIteratorValues;
	collections.printListItems = printListItems;
	collections.printObjectProperties = printObjectProperties;

	/**
	 * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */
	const getKeysOfEnumerableProperties = (object, compareKeys) => {
	  const keys = Object.keys(object).sort(compareKeys);
	  if (Object.getOwnPropertySymbols) {
	    Object.getOwnPropertySymbols(object).forEach(symbol => {
	      if (Object.getOwnPropertyDescriptor(object, symbol).enumerable) {
	        keys.push(symbol);
	      }
	    });
	  }
	  return keys;
	};
	/**
	 * Return entries (for example, of a map)
	 * with spacing, indentation, and comma
	 * without surrounding punctuation (for example, braces)
	 */

	function printIteratorEntries(iterator, config, indentation, depth, refs, printer,
	// Too bad, so sad that separator for ECMAScript Map has been ' => '
	// What a distracting diff if you change a data structure to/from
	// ECMAScript Object or Immutable.Map/OrderedMap which use the default.
	separator) {
	  if (separator === void 0) {
	    separator = ': ';
	  }
	  let result = '';
	  let current = iterator.next();
	  if (!current.done) {
	    result += config.spacingOuter;
	    const indentationNext = indentation + config.indent;
	    while (!current.done) {
	      const name = printer(current.value[0], config, indentationNext, depth, refs);
	      const value = printer(current.value[1], config, indentationNext, depth, refs);
	      result += indentationNext + name + separator + value;
	      current = iterator.next();
	      if (!current.done) {
	        result += ',' + config.spacingInner;
	      } else if (!config.min) {
	        result += ',';
	      }
	    }
	    result += config.spacingOuter + indentation;
	  }
	  return result;
	}
	/**
	 * Return values (for example, of a set)
	 * with spacing, indentation, and comma
	 * without surrounding punctuation (braces or brackets)
	 */

	function printIteratorValues(iterator, config, indentation, depth, refs, printer) {
	  let result = '';
	  let current = iterator.next();
	  if (!current.done) {
	    result += config.spacingOuter;
	    const indentationNext = indentation + config.indent;
	    while (!current.done) {
	      result += indentationNext + printer(current.value, config, indentationNext, depth, refs);
	      current = iterator.next();
	      if (!current.done) {
	        result += ',' + config.spacingInner;
	      } else if (!config.min) {
	        result += ',';
	      }
	    }
	    result += config.spacingOuter + indentation;
	  }
	  return result;
	}
	/**
	 * Return items (for example, of an array)
	 * with spacing, indentation, and comma
	 * without surrounding punctuation (for example, brackets)
	 **/

	function printListItems(list, config, indentation, depth, refs, printer) {
	  let result = '';
	  if (list.length) {
	    result += config.spacingOuter;
	    const indentationNext = indentation + config.indent;
	    for (let i = 0; i < list.length; i++) {
	      result += indentationNext;
	      if (i in list) {
	        result += printer(list[i], config, indentationNext, depth, refs);
	      }
	      if (i < list.length - 1) {
	        result += ',' + config.spacingInner;
	      } else if (!config.min) {
	        result += ',';
	      }
	    }
	    result += config.spacingOuter + indentation;
	  }
	  return result;
	}
	/**
	 * Return properties of an object
	 * with spacing, indentation, and comma
	 * without surrounding punctuation (for example, braces)
	 */

	function printObjectProperties(val, config, indentation, depth, refs, printer) {
	  let result = '';
	  const keys = getKeysOfEnumerableProperties(val, config.compareKeys);
	  if (keys.length) {
	    result += config.spacingOuter;
	    const indentationNext = indentation + config.indent;
	    for (let i = 0; i < keys.length; i++) {
	      const key = keys[i];
	      const name = printer(key, config, indentationNext, depth, refs);
	      const value = printer(val[key], config, indentationNext, depth, refs);
	      result += indentationNext + name + ': ' + value;
	      if (i < keys.length - 1) {
	        result += ',' + config.spacingInner;
	      } else if (!config.min) {
	        result += ',';
	      }
	    }
	    result += config.spacingOuter + indentation;
	  }
	  return result;
	}

	var AsymmetricMatcher = {};

	Object.defineProperty(AsymmetricMatcher, '__esModule', {
	  value: true
	});
	AsymmetricMatcher.test = AsymmetricMatcher.serialize = AsymmetricMatcher.default = void 0;
	var _collections$3 = collections;
	var global$2 = function () {
	  if (typeof globalThis !== 'undefined') {
	    return globalThis;
	  } else if (typeof global$2 !== 'undefined') {
	    return global$2;
	  } else if (typeof self !== 'undefined') {
	    return self;
	  } else if (typeof window !== 'undefined') {
	    return window;
	  } else {
	    return Function('return this')();
	  }
	}();
	var Symbol$2 = global$2['jest-symbol-do-not-touch'] || global$2.Symbol;
	const asymmetricMatcher = typeof Symbol$2 === 'function' && Symbol$2.for ? Symbol$2.for('jest.asymmetricMatcher') : 0x1357a5;
	const SPACE$2 = ' ';
	const serialize$6 = (val, config, indentation, depth, refs, printer) => {
	  const stringedValue = val.toString();
	  if (stringedValue === 'ArrayContaining' || stringedValue === 'ArrayNotContaining') {
	    if (++depth > config.maxDepth) {
	      return '[' + stringedValue + ']';
	    }
	    return stringedValue + SPACE$2 + '[' + (0, _collections$3.printListItems)(val.sample, config, indentation, depth, refs, printer) + ']';
	  }
	  if (stringedValue === 'ObjectContaining' || stringedValue === 'ObjectNotContaining') {
	    if (++depth > config.maxDepth) {
	      return '[' + stringedValue + ']';
	    }
	    return stringedValue + SPACE$2 + '{' + (0, _collections$3.printObjectProperties)(val.sample, config, indentation, depth, refs, printer) + '}';
	  }
	  if (stringedValue === 'StringMatching' || stringedValue === 'StringNotMatching') {
	    return stringedValue + SPACE$2 + printer(val.sample, config, indentation, depth, refs);
	  }
	  if (stringedValue === 'StringContaining' || stringedValue === 'StringNotContaining') {
	    return stringedValue + SPACE$2 + printer(val.sample, config, indentation, depth, refs);
	  }
	  return val.toAsymmetricMatcher();
	};
	AsymmetricMatcher.serialize = serialize$6;
	const test$6 = val => val && val.$$typeof === asymmetricMatcher;
	AsymmetricMatcher.test = test$6;
	const plugin$6 = {
	  serialize: serialize$6,
	  test: test$6
	};
	var _default$2p = plugin$6;
	AsymmetricMatcher.default = _default$2p;

	var ConvertAnsi = {};

	var ansiRegex = function (_temp) {
	  let {
	    onlyFirst = false
	  } = _temp === void 0 ? {} : _temp;
	  const pattern = ['[\\u001B\\u009B][[\\]()#;?]*(?:(?:(?:(?:;[-a-zA-Z\\d\\/#&.:=?%@~_]+)*|[a-zA-Z\\d]+(?:;[-a-zA-Z\\d\\/#&.:=?%@~_]*)*)?\\u0007)', '(?:(?:\\d{1,4}(?:;\\d{0,4})*)?[\\dA-PR-TZcf-ntqry=><~]))'].join('|');
	  return new RegExp(pattern, onlyFirst ? undefined : 'g');
	};

	Object.defineProperty(ConvertAnsi, '__esModule', {
	  value: true
	});
	ConvertAnsi.test = ConvertAnsi.serialize = ConvertAnsi.default = void 0;
	var _ansiRegex = _interopRequireDefault$d(ansiRegex);
	var _ansiStyles$1 = _interopRequireDefault$d(ansiStyles.exports);
	function _interopRequireDefault$d(obj) {
	  return obj && obj.__esModule ? obj : {
	    default: obj
	  };
	}

	/**
	 * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */
	const toHumanReadableAnsi = text => text.replace((0, _ansiRegex.default)(), match => {
	  switch (match) {
	    case _ansiStyles$1.default.red.close:
	    case _ansiStyles$1.default.green.close:
	    case _ansiStyles$1.default.cyan.close:
	    case _ansiStyles$1.default.gray.close:
	    case _ansiStyles$1.default.white.close:
	    case _ansiStyles$1.default.yellow.close:
	    case _ansiStyles$1.default.bgRed.close:
	    case _ansiStyles$1.default.bgGreen.close:
	    case _ansiStyles$1.default.bgYellow.close:
	    case _ansiStyles$1.default.inverse.close:
	    case _ansiStyles$1.default.dim.close:
	    case _ansiStyles$1.default.bold.close:
	    case _ansiStyles$1.default.reset.open:
	    case _ansiStyles$1.default.reset.close:
	      return '</>';
	    case _ansiStyles$1.default.red.open:
	      return '<red>';
	    case _ansiStyles$1.default.green.open:
	      return '<green>';
	    case _ansiStyles$1.default.cyan.open:
	      return '<cyan>';
	    case _ansiStyles$1.default.gray.open:
	      return '<gray>';
	    case _ansiStyles$1.default.white.open:
	      return '<white>';
	    case _ansiStyles$1.default.yellow.open:
	      return '<yellow>';
	    case _ansiStyles$1.default.bgRed.open:
	      return '<bgRed>';
	    case _ansiStyles$1.default.bgGreen.open:
	      return '<bgGreen>';
	    case _ansiStyles$1.default.bgYellow.open:
	      return '<bgYellow>';
	    case _ansiStyles$1.default.inverse.open:
	      return '<inverse>';
	    case _ansiStyles$1.default.dim.open:
	      return '<dim>';
	    case _ansiStyles$1.default.bold.open:
	      return '<bold>';
	    default:
	      return '';
	  }
	});
	const test$5 = val => typeof val === 'string' && !!val.match((0, _ansiRegex.default)());
	ConvertAnsi.test = test$5;
	const serialize$5 = (val, config, indentation, depth, refs, printer) => printer(toHumanReadableAnsi(val), config, indentation, depth, refs);
	ConvertAnsi.serialize = serialize$5;
	const plugin$5 = {
	  serialize: serialize$5,
	  test: test$5
	};
	var _default$2o = plugin$5;
	ConvertAnsi.default = _default$2o;

	var DOMCollection$1 = {};

	Object.defineProperty(DOMCollection$1, '__esModule', {
	  value: true
	});
	DOMCollection$1.test = DOMCollection$1.serialize = DOMCollection$1.default = void 0;
	var _collections$2 = collections;

	/**
	 * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	/* eslint-disable local/ban-types-eventually */
	const SPACE$1 = ' ';
	const OBJECT_NAMES = ['DOMStringMap', 'NamedNodeMap'];
	const ARRAY_REGEXP = /^(HTML\w*Collection|NodeList)$/;
	const testName = name => OBJECT_NAMES.indexOf(name) !== -1 || ARRAY_REGEXP.test(name);
	const test$4 = val => val && val.constructor && !!val.constructor.name && testName(val.constructor.name);
	DOMCollection$1.test = test$4;
	const isNamedNodeMap = collection => collection.constructor.name === 'NamedNodeMap';
	const serialize$4 = (collection, config, indentation, depth, refs, printer) => {
	  const name = collection.constructor.name;
	  if (++depth > config.maxDepth) {
	    return '[' + name + ']';
	  }
	  return (config.min ? '' : name + SPACE$1) + (OBJECT_NAMES.indexOf(name) !== -1 ? '{' + (0, _collections$2.printObjectProperties)(isNamedNodeMap(collection) ? Array.from(collection).reduce((props, attribute) => {
	    props[attribute.name] = attribute.value;
	    return props;
	  }, {}) : {
	    ...collection
	  }, config, indentation, depth, refs, printer) + '}' : '[' + (0, _collections$2.printListItems)(Array.from(collection), config, indentation, depth, refs, printer) + ']');
	};
	DOMCollection$1.serialize = serialize$4;
	const plugin$4 = {
	  serialize: serialize$4,
	  test: test$4
	};
	var _default$2n = plugin$4;
	DOMCollection$1.default = _default$2n;

	var DOMElement = {};

	var markup = {};

	var escapeHTML$2 = {};

	Object.defineProperty(escapeHTML$2, '__esModule', {
	  value: true
	});
	escapeHTML$2.default = escapeHTML$1;

	/**
	 * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */
	function escapeHTML$1(str) {
	  return str.replace(/</g, '&lt;').replace(/>/g, '&gt;');
	}

	Object.defineProperty(markup, '__esModule', {
	  value: true
	});
	markup.printText = markup.printProps = markup.printElementAsLeaf = markup.printElement = markup.printComment = markup.printChildren = void 0;
	var _escapeHTML = _interopRequireDefault$c(escapeHTML$2);
	function _interopRequireDefault$c(obj) {
	  return obj && obj.__esModule ? obj : {
	    default: obj
	  };
	}

	/**
	 * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */
	// Return empty string if keys is empty.
	const printProps$1 = (keys, props, config, indentation, depth, refs, printer) => {
	  const indentationNext = indentation + config.indent;
	  const colors = config.colors;
	  return keys.map(key => {
	    const value = props[key];
	    let printed = printer(value, config, indentationNext, depth, refs);
	    if (typeof value !== 'string') {
	      if (printed.indexOf('\n') !== -1) {
	        printed = config.spacingOuter + indentationNext + printed + config.spacingOuter + indentation;
	      }
	      printed = '{' + printed + '}';
	    }
	    return config.spacingInner + indentation + colors.prop.open + key + colors.prop.close + '=' + colors.value.open + printed + colors.value.close;
	  }).join('');
	}; // Return empty string if children is empty.

	markup.printProps = printProps$1;
	const printChildren$1 = (children, config, indentation, depth, refs, printer) => children.map(child => config.spacingOuter + indentation + (typeof child === 'string' ? printText$1(child, config) : printer(child, config, indentation, depth, refs))).join('');
	markup.printChildren = printChildren$1;
	const printText$1 = (text, config) => {
	  const contentColor = config.colors.content;
	  return contentColor.open + (0, _escapeHTML.default)(text) + contentColor.close;
	};
	markup.printText = printText$1;
	const printComment$1 = (comment, config) => {
	  const commentColor = config.colors.comment;
	  return commentColor.open + '<!--' + (0, _escapeHTML.default)(comment) + '-->' + commentColor.close;
	}; // Separate the functions to format props, children, and element,
	// so a plugin could override a particular function, if needed.
	// Too bad, so sad: the traditional (but unnecessary) space
	// in a self-closing tagColor requires a second test of printedProps.

	markup.printComment = printComment$1;
	const printElement$1 = (type, printedProps, printedChildren, config, indentation) => {
	  const tagColor = config.colors.tag;
	  return tagColor.open + '<' + type + (printedProps && tagColor.close + printedProps + config.spacingOuter + indentation + tagColor.open) + (printedChildren ? '>' + tagColor.close + printedChildren + config.spacingOuter + indentation + tagColor.open + '</' + type : (printedProps && !config.min ? '' : ' ') + '/') + '>' + tagColor.close;
	};
	markup.printElement = printElement$1;
	const printElementAsLeaf$1 = (type, config) => {
	  const tagColor = config.colors.tag;
	  return tagColor.open + '<' + type + tagColor.close + ' …' + tagColor.open + ' />' + tagColor.close;
	};
	markup.printElementAsLeaf = printElementAsLeaf$1;

	Object.defineProperty(DOMElement, '__esModule', {
	  value: true
	});
	DOMElement.test = DOMElement.serialize = DOMElement.default = void 0;
	var _markup$2 = markup;

	/**
	 * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */
	const ELEMENT_NODE$2 = 1;
	const TEXT_NODE$2 = 3;
	const COMMENT_NODE$2 = 8;
	const FRAGMENT_NODE$1 = 11;
	const ELEMENT_REGEXP$1 = /^((HTML|SVG)\w*)?Element$/;
	const testHasAttribute = val => {
	  try {
	    return typeof val.hasAttribute === 'function' && val.hasAttribute('is');
	  } catch {
	    return false;
	  }
	};
	const testNode$1 = val => {
	  const constructorName = val.constructor.name;
	  const {
	    nodeType,
	    tagName
	  } = val;
	  const isCustomElement = typeof tagName === 'string' && tagName.includes('-') || testHasAttribute(val);
	  return nodeType === ELEMENT_NODE$2 && (ELEMENT_REGEXP$1.test(constructorName) || isCustomElement) || nodeType === TEXT_NODE$2 && constructorName === 'Text' || nodeType === COMMENT_NODE$2 && constructorName === 'Comment' || nodeType === FRAGMENT_NODE$1 && constructorName === 'DocumentFragment';
	};
	const test$3 = val => {
	  var _val$constructor;
	  return (val === null || val === void 0 ? void 0 : (_val$constructor = val.constructor) === null || _val$constructor === void 0 ? void 0 : _val$constructor.name) && testNode$1(val);
	};
	DOMElement.test = test$3;
	function nodeIsText$1(node) {
	  return node.nodeType === TEXT_NODE$2;
	}
	function nodeIsComment$1(node) {
	  return node.nodeType === COMMENT_NODE$2;
	}
	function nodeIsFragment$1(node) {
	  return node.nodeType === FRAGMENT_NODE$1;
	}
	const serialize$3 = (node, config, indentation, depth, refs, printer) => {
	  if (nodeIsText$1(node)) {
	    return (0, _markup$2.printText)(node.data, config);
	  }
	  if (nodeIsComment$1(node)) {
	    return (0, _markup$2.printComment)(node.data, config);
	  }
	  const type = nodeIsFragment$1(node) ? 'DocumentFragment' : node.tagName.toLowerCase();
	  if (++depth > config.maxDepth) {
	    return (0, _markup$2.printElementAsLeaf)(type, config);
	  }
	  return (0, _markup$2.printElement)(type, (0, _markup$2.printProps)(nodeIsFragment$1(node) ? [] : Array.from(node.attributes).map(attr => attr.name).sort(), nodeIsFragment$1(node) ? {} : Array.from(node.attributes).reduce((props, attribute) => {
	    props[attribute.name] = attribute.value;
	    return props;
	  }, {}), config, indentation + config.indent, depth, refs, printer), (0, _markup$2.printChildren)(Array.prototype.slice.call(node.childNodes || node.children), config, indentation + config.indent, depth, refs, printer), config, indentation);
	};
	DOMElement.serialize = serialize$3;
	const plugin$3 = {
	  serialize: serialize$3,
	  test: test$3
	};
	var _default$2m = plugin$3;
	DOMElement.default = _default$2m;

	var Immutable = {};

	Object.defineProperty(Immutable, '__esModule', {
	  value: true
	});
	Immutable.test = Immutable.serialize = Immutable.default = void 0;
	var _collections$1 = collections;

	/**
	 * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */
	// SENTINEL constants are from https://github.com/facebook/immutable-js
	const IS_ITERABLE_SENTINEL = '@@__IMMUTABLE_ITERABLE__@@';
	const IS_LIST_SENTINEL = '@@__IMMUTABLE_LIST__@@';
	const IS_KEYED_SENTINEL = '@@__IMMUTABLE_KEYED__@@';
	const IS_MAP_SENTINEL = '@@__IMMUTABLE_MAP__@@';
	const IS_ORDERED_SENTINEL = '@@__IMMUTABLE_ORDERED__@@';
	const IS_RECORD_SENTINEL = '@@__IMMUTABLE_RECORD__@@'; // immutable v4

	const IS_SEQ_SENTINEL = '@@__IMMUTABLE_SEQ__@@';
	const IS_SET_SENTINEL = '@@__IMMUTABLE_SET__@@';
	const IS_STACK_SENTINEL = '@@__IMMUTABLE_STACK__@@';
	const getImmutableName = name => 'Immutable.' + name;
	const printAsLeaf = name => '[' + name + ']';
	const SPACE = ' ';
	const LAZY = '…'; // Seq is lazy if it calls a method like filter

	const printImmutableEntries = (val, config, indentation, depth, refs, printer, type) => ++depth > config.maxDepth ? printAsLeaf(getImmutableName(type)) : getImmutableName(type) + SPACE + '{' + (0, _collections$1.printIteratorEntries)(val.entries(), config, indentation, depth, refs, printer) + '}'; // Record has an entries method because it is a collection in immutable v3.
	// Return an iterator for Immutable Record from version v3 or v4.

	function getRecordEntries(val) {
	  let i = 0;
	  return {
	    next() {
	      if (i < val._keys.length) {
	        const key = val._keys[i++];
	        return {
	          done: false,
	          value: [key, val.get(key)]
	        };
	      }
	      return {
	        done: true,
	        value: undefined
	      };
	    }
	  };
	}
	const printImmutableRecord = (val, config, indentation, depth, refs, printer) => {
	  // _name property is defined only for an Immutable Record instance
	  // which was constructed with a second optional descriptive name arg
	  const name = getImmutableName(val._name || 'Record');
	  return ++depth > config.maxDepth ? printAsLeaf(name) : name + SPACE + '{' + (0, _collections$1.printIteratorEntries)(getRecordEntries(val), config, indentation, depth, refs, printer) + '}';
	};
	const printImmutableSeq = (val, config, indentation, depth, refs, printer) => {
	  const name = getImmutableName('Seq');
	  if (++depth > config.maxDepth) {
	    return printAsLeaf(name);
	  }
	  if (val[IS_KEYED_SENTINEL]) {
	    return name + SPACE + '{' + (
	    // from Immutable collection of entries or from ECMAScript object
	    val._iter || val._object ? (0, _collections$1.printIteratorEntries)(val.entries(), config, indentation, depth, refs, printer) : LAZY) + '}';
	  }
	  return name + SPACE + '[' + (val._iter ||
	  // from Immutable collection of values
	  val._array ||
	  // from ECMAScript array
	  val._collection ||
	  // from ECMAScript collection in immutable v4
	  val._iterable // from ECMAScript collection in immutable v3
	  ? (0, _collections$1.printIteratorValues)(val.values(), config, indentation, depth, refs, printer) : LAZY) + ']';
	};
	const printImmutableValues = (val, config, indentation, depth, refs, printer, type) => ++depth > config.maxDepth ? printAsLeaf(getImmutableName(type)) : getImmutableName(type) + SPACE + '[' + (0, _collections$1.printIteratorValues)(val.values(), config, indentation, depth, refs, printer) + ']';
	const serialize$2 = (val, config, indentation, depth, refs, printer) => {
	  if (val[IS_MAP_SENTINEL]) {
	    return printImmutableEntries(val, config, indentation, depth, refs, printer, val[IS_ORDERED_SENTINEL] ? 'OrderedMap' : 'Map');
	  }
	  if (val[IS_LIST_SENTINEL]) {
	    return printImmutableValues(val, config, indentation, depth, refs, printer, 'List');
	  }
	  if (val[IS_SET_SENTINEL]) {
	    return printImmutableValues(val, config, indentation, depth, refs, printer, val[IS_ORDERED_SENTINEL] ? 'OrderedSet' : 'Set');
	  }
	  if (val[IS_STACK_SENTINEL]) {
	    return printImmutableValues(val, config, indentation, depth, refs, printer, 'Stack');
	  }
	  if (val[IS_SEQ_SENTINEL]) {
	    return printImmutableSeq(val, config, indentation, depth, refs, printer);
	  } // For compatibility with immutable v3 and v4, let record be the default.

	  return printImmutableRecord(val, config, indentation, depth, refs, printer);
	}; // Explicitly comparing sentinel properties to true avoids false positive
	// when mock identity-obj-proxy returns the key as the value for any key.

	Immutable.serialize = serialize$2;
	const test$2 = val => val && (val[IS_ITERABLE_SENTINEL] === true || val[IS_RECORD_SENTINEL] === true);
	Immutable.test = test$2;
	const plugin$2 = {
	  serialize: serialize$2,
	  test: test$2
	};
	var _default$2l = plugin$2;
	Immutable.default = _default$2l;

	var ReactElement = {};

	var reactIs = {exports: {}};

	/** @license React v17.0.2
	 * react-is.production.min.js
	 *
	 * Copyright (c) Facebook, Inc. and its affiliates.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */
	if ("function" === typeof Symbol && Symbol.for) {
	  var x = Symbol.for;
	  x("react.element");
	  x("react.portal");
	  x("react.fragment");
	  x("react.strict_mode");
	  x("react.profiler");
	  x("react.provider");
	  x("react.context");
	  x("react.forward_ref");
	  x("react.suspense");
	  x("react.suspense_list");
	  x("react.memo");
	  x("react.lazy");
	  x("react.block");
	  x("react.server.block");
	  x("react.fundamental");
	  x("react.debug_trace_mode");
	  x("react.legacy_hidden");
	}

	var reactIs_development = {};

	/** @license React v17.0.2
	 * react-is.development.js
	 *
	 * Copyright (c) Facebook, Inc. and its affiliates.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */
	{
	  (function () {

	    // ATTENTION
	    // When adding new symbols to this file,
	    // Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'
	    // The Symbol used to tag the ReactElement-like types. If there is no native Symbol
	    // nor polyfill, then a plain number is used for performance.
	    var REACT_ELEMENT_TYPE = 0xeac7;
	    var REACT_PORTAL_TYPE = 0xeaca;
	    var REACT_FRAGMENT_TYPE = 0xeacb;
	    var REACT_STRICT_MODE_TYPE = 0xeacc;
	    var REACT_PROFILER_TYPE = 0xead2;
	    var REACT_PROVIDER_TYPE = 0xeacd;
	    var REACT_CONTEXT_TYPE = 0xeace;
	    var REACT_FORWARD_REF_TYPE = 0xead0;
	    var REACT_SUSPENSE_TYPE = 0xead1;
	    var REACT_SUSPENSE_LIST_TYPE = 0xead8;
	    var REACT_MEMO_TYPE = 0xead3;
	    var REACT_LAZY_TYPE = 0xead4;
	    var REACT_BLOCK_TYPE = 0xead9;
	    var REACT_SERVER_BLOCK_TYPE = 0xeada;
	    var REACT_FUNDAMENTAL_TYPE = 0xead5;
	    var REACT_DEBUG_TRACING_MODE_TYPE = 0xeae1;
	    var REACT_LEGACY_HIDDEN_TYPE = 0xeae3;
	    if (typeof Symbol === 'function' && Symbol.for) {
	      var symbolFor = Symbol.for;
	      REACT_ELEMENT_TYPE = symbolFor('react.element');
	      REACT_PORTAL_TYPE = symbolFor('react.portal');
	      REACT_FRAGMENT_TYPE = symbolFor('react.fragment');
	      REACT_STRICT_MODE_TYPE = symbolFor('react.strict_mode');
	      REACT_PROFILER_TYPE = symbolFor('react.profiler');
	      REACT_PROVIDER_TYPE = symbolFor('react.provider');
	      REACT_CONTEXT_TYPE = symbolFor('react.context');
	      REACT_FORWARD_REF_TYPE = symbolFor('react.forward_ref');
	      REACT_SUSPENSE_TYPE = symbolFor('react.suspense');
	      REACT_SUSPENSE_LIST_TYPE = symbolFor('react.suspense_list');
	      REACT_MEMO_TYPE = symbolFor('react.memo');
	      REACT_LAZY_TYPE = symbolFor('react.lazy');
	      REACT_BLOCK_TYPE = symbolFor('react.block');
	      REACT_SERVER_BLOCK_TYPE = symbolFor('react.server.block');
	      REACT_FUNDAMENTAL_TYPE = symbolFor('react.fundamental');
	      symbolFor('react.scope');
	      symbolFor('react.opaque.id');
	      REACT_DEBUG_TRACING_MODE_TYPE = symbolFor('react.debug_trace_mode');
	      symbolFor('react.offscreen');
	      REACT_LEGACY_HIDDEN_TYPE = symbolFor('react.legacy_hidden');
	    }

	    // Filter certain DOM attributes (e.g. src, href) if their values are empty strings.

	    var enableScopeAPI = false; // Experimental Create Event Handle API.

	    function isValidElementType(type) {
	      if (typeof type === 'string' || typeof type === 'function') {
	        return true;
	      } // Note: typeof might be other than 'symbol' or 'number' (e.g. if it's a polyfill).

	      if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || type === REACT_DEBUG_TRACING_MODE_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || type === REACT_LEGACY_HIDDEN_TYPE || enableScopeAPI) {
	        return true;
	      }
	      if (typeof type === 'object' && type !== null) {
	        if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_BLOCK_TYPE || type[0] === REACT_SERVER_BLOCK_TYPE) {
	          return true;
	        }
	      }
	      return false;
	    }
	    function typeOf(object) {
	      if (typeof object === 'object' && object !== null) {
	        var $$typeof = object.$$typeof;
	        switch ($$typeof) {
	          case REACT_ELEMENT_TYPE:
	            var type = object.type;
	            switch (type) {
	              case REACT_FRAGMENT_TYPE:
	              case REACT_PROFILER_TYPE:
	              case REACT_STRICT_MODE_TYPE:
	              case REACT_SUSPENSE_TYPE:
	              case REACT_SUSPENSE_LIST_TYPE:
	                return type;
	              default:
	                var $$typeofType = type && type.$$typeof;
	                switch ($$typeofType) {
	                  case REACT_CONTEXT_TYPE:
	                  case REACT_FORWARD_REF_TYPE:
	                  case REACT_LAZY_TYPE:
	                  case REACT_MEMO_TYPE:
	                  case REACT_PROVIDER_TYPE:
	                    return $$typeofType;
	                  default:
	                    return $$typeof;
	                }
	            }
	          case REACT_PORTAL_TYPE:
	            return $$typeof;
	        }
	      }
	      return undefined;
	    }
	    var ContextConsumer = REACT_CONTEXT_TYPE;
	    var ContextProvider = REACT_PROVIDER_TYPE;
	    var Element = REACT_ELEMENT_TYPE;
	    var ForwardRef = REACT_FORWARD_REF_TYPE;
	    var Fragment = REACT_FRAGMENT_TYPE;
	    var Lazy = REACT_LAZY_TYPE;
	    var Memo = REACT_MEMO_TYPE;
	    var Portal = REACT_PORTAL_TYPE;
	    var Profiler = REACT_PROFILER_TYPE;
	    var StrictMode = REACT_STRICT_MODE_TYPE;
	    var Suspense = REACT_SUSPENSE_TYPE;
	    var hasWarnedAboutDeprecatedIsAsyncMode = false;
	    var hasWarnedAboutDeprecatedIsConcurrentMode = false; // AsyncMode should be deprecated

	    function isAsyncMode(object) {
	      {
	        if (!hasWarnedAboutDeprecatedIsAsyncMode) {
	          hasWarnedAboutDeprecatedIsAsyncMode = true; // Using console['warn'] to evade Babel and ESLint

	          console['warn']('The ReactIs.isAsyncMode() alias has been deprecated, ' + 'and will be removed in React 18+.');
	        }
	      }
	      return false;
	    }
	    function isConcurrentMode(object) {
	      {
	        if (!hasWarnedAboutDeprecatedIsConcurrentMode) {
	          hasWarnedAboutDeprecatedIsConcurrentMode = true; // Using console['warn'] to evade Babel and ESLint

	          console['warn']('The ReactIs.isConcurrentMode() alias has been deprecated, ' + 'and will be removed in React 18+.');
	        }
	      }
	      return false;
	    }
	    function isContextConsumer(object) {
	      return typeOf(object) === REACT_CONTEXT_TYPE;
	    }
	    function isContextProvider(object) {
	      return typeOf(object) === REACT_PROVIDER_TYPE;
	    }
	    function isElement(object) {
	      return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
	    }
	    function isForwardRef(object) {
	      return typeOf(object) === REACT_FORWARD_REF_TYPE;
	    }
	    function isFragment(object) {
	      return typeOf(object) === REACT_FRAGMENT_TYPE;
	    }
	    function isLazy(object) {
	      return typeOf(object) === REACT_LAZY_TYPE;
	    }
	    function isMemo(object) {
	      return typeOf(object) === REACT_MEMO_TYPE;
	    }
	    function isPortal(object) {
	      return typeOf(object) === REACT_PORTAL_TYPE;
	    }
	    function isProfiler(object) {
	      return typeOf(object) === REACT_PROFILER_TYPE;
	    }
	    function isStrictMode(object) {
	      return typeOf(object) === REACT_STRICT_MODE_TYPE;
	    }
	    function isSuspense(object) {
	      return typeOf(object) === REACT_SUSPENSE_TYPE;
	    }
	    reactIs_development.ContextConsumer = ContextConsumer;
	    reactIs_development.ContextProvider = ContextProvider;
	    reactIs_development.Element = Element;
	    reactIs_development.ForwardRef = ForwardRef;
	    reactIs_development.Fragment = Fragment;
	    reactIs_development.Lazy = Lazy;
	    reactIs_development.Memo = Memo;
	    reactIs_development.Portal = Portal;
	    reactIs_development.Profiler = Profiler;
	    reactIs_development.StrictMode = StrictMode;
	    reactIs_development.Suspense = Suspense;
	    reactIs_development.isAsyncMode = isAsyncMode;
	    reactIs_development.isConcurrentMode = isConcurrentMode;
	    reactIs_development.isContextConsumer = isContextConsumer;
	    reactIs_development.isContextProvider = isContextProvider;
	    reactIs_development.isElement = isElement;
	    reactIs_development.isForwardRef = isForwardRef;
	    reactIs_development.isFragment = isFragment;
	    reactIs_development.isLazy = isLazy;
	    reactIs_development.isMemo = isMemo;
	    reactIs_development.isPortal = isPortal;
	    reactIs_development.isProfiler = isProfiler;
	    reactIs_development.isStrictMode = isStrictMode;
	    reactIs_development.isSuspense = isSuspense;
	    reactIs_development.isValidElementType = isValidElementType;
	    reactIs_development.typeOf = typeOf;
	  })();
	}

	{
	  reactIs.exports = reactIs_development;
	}

	Object.defineProperty(ReactElement, '__esModule', {
	  value: true
	});
	ReactElement.test = ReactElement.serialize = ReactElement.default = void 0;
	var ReactIs = _interopRequireWildcard(reactIs.exports);
	var _markup$1 = markup;
	function _getRequireWildcardCache(nodeInterop) {
	  if (typeof WeakMap !== 'function') return null;
	  var cacheBabelInterop = new WeakMap();
	  var cacheNodeInterop = new WeakMap();
	  return (_getRequireWildcardCache = function (nodeInterop) {
	    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
	  })(nodeInterop);
	}
	function _interopRequireWildcard(obj, nodeInterop) {
	  if (!nodeInterop && obj && obj.__esModule) {
	    return obj;
	  }
	  if (obj === null || typeof obj !== 'object' && typeof obj !== 'function') {
	    return {
	      default: obj
	    };
	  }
	  var cache = _getRequireWildcardCache(nodeInterop);
	  if (cache && cache.has(obj)) {
	    return cache.get(obj);
	  }
	  var newObj = {};
	  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
	  for (var key in obj) {
	    if (key !== 'default' && Object.prototype.hasOwnProperty.call(obj, key)) {
	      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
	      if (desc && (desc.get || desc.set)) {
	        Object.defineProperty(newObj, key, desc);
	      } else {
	        newObj[key] = obj[key];
	      }
	    }
	  }
	  newObj.default = obj;
	  if (cache) {
	    cache.set(obj, newObj);
	  }
	  return newObj;
	}

	/**
	 * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */
	// Given element.props.children, or subtree during recursive traversal,
	// return flattened array of children.
	const getChildren = function (arg, children) {
	  if (children === void 0) {
	    children = [];
	  }
	  if (Array.isArray(arg)) {
	    arg.forEach(item => {
	      getChildren(item, children);
	    });
	  } else if (arg != null && arg !== false) {
	    children.push(arg);
	  }
	  return children;
	};
	const getType = element => {
	  const type = element.type;
	  if (typeof type === 'string') {
	    return type;
	  }
	  if (typeof type === 'function') {
	    return type.displayName || type.name || 'Unknown';
	  }
	  if (ReactIs.isFragment(element)) {
	    return 'React.Fragment';
	  }
	  if (ReactIs.isSuspense(element)) {
	    return 'React.Suspense';
	  }
	  if (typeof type === 'object' && type !== null) {
	    if (ReactIs.isContextProvider(element)) {
	      return 'Context.Provider';
	    }
	    if (ReactIs.isContextConsumer(element)) {
	      return 'Context.Consumer';
	    }
	    if (ReactIs.isForwardRef(element)) {
	      if (type.displayName) {
	        return type.displayName;
	      }
	      const functionName = type.render.displayName || type.render.name || '';
	      return functionName !== '' ? 'ForwardRef(' + functionName + ')' : 'ForwardRef';
	    }
	    if (ReactIs.isMemo(element)) {
	      const functionName = type.displayName || type.type.displayName || type.type.name || '';
	      return functionName !== '' ? 'Memo(' + functionName + ')' : 'Memo';
	    }
	  }
	  return 'UNDEFINED';
	};
	const getPropKeys$1 = element => {
	  const {
	    props
	  } = element;
	  return Object.keys(props).filter(key => key !== 'children' && props[key] !== undefined).sort();
	};
	const serialize$1 = (element, config, indentation, depth, refs, printer) => ++depth > config.maxDepth ? (0, _markup$1.printElementAsLeaf)(getType(element), config) : (0, _markup$1.printElement)(getType(element), (0, _markup$1.printProps)(getPropKeys$1(element), element.props, config, indentation + config.indent, depth, refs, printer), (0, _markup$1.printChildren)(getChildren(element.props.children), config, indentation + config.indent, depth, refs, printer), config, indentation);
	ReactElement.serialize = serialize$1;
	const test$1 = val => val != null && ReactIs.isElement(val);
	ReactElement.test = test$1;
	const plugin$1 = {
	  serialize: serialize$1,
	  test: test$1
	};
	var _default$2k = plugin$1;
	ReactElement.default = _default$2k;

	var ReactTestComponent = {};

	Object.defineProperty(ReactTestComponent, '__esModule', {
	  value: true
	});
	ReactTestComponent.test = ReactTestComponent.serialize = ReactTestComponent.default = void 0;
	var _markup = markup;
	var global$1 = function () {
	  if (typeof globalThis !== 'undefined') {
	    return globalThis;
	  } else if (typeof global$1 !== 'undefined') {
	    return global$1;
	  } else if (typeof self !== 'undefined') {
	    return self;
	  } else if (typeof window !== 'undefined') {
	    return window;
	  } else {
	    return Function('return this')();
	  }
	}();
	var Symbol$1 = global$1['jest-symbol-do-not-touch'] || global$1.Symbol;
	const testSymbol = typeof Symbol$1 === 'function' && Symbol$1.for ? Symbol$1.for('react.test.json') : 0xea71357;
	const getPropKeys = object => {
	  const {
	    props
	  } = object;
	  return props ? Object.keys(props).filter(key => props[key] !== undefined).sort() : [];
	};
	const serialize = (object, config, indentation, depth, refs, printer) => ++depth > config.maxDepth ? (0, _markup.printElementAsLeaf)(object.type, config) : (0, _markup.printElement)(object.type, object.props ? (0, _markup.printProps)(getPropKeys(object), object.props, config, indentation + config.indent, depth, refs, printer) : '', object.children ? (0, _markup.printChildren)(object.children, config, indentation + config.indent, depth, refs, printer) : '', config, indentation);
	ReactTestComponent.serialize = serialize;
	const test = val => val && val.$$typeof === testSymbol;
	ReactTestComponent.test = test;
	const plugin = {
	  serialize,
	  test
	};
	var _default$2j = plugin;
	ReactTestComponent.default = _default$2j;

	Object.defineProperty(build, '__esModule', {
	  value: true
	});
	var default_1 = build.default = DEFAULT_OPTIONS_1 = build.DEFAULT_OPTIONS = void 0;
	var format_1 = build.format = format;
	var plugins_1 = build.plugins = void 0;
	var _ansiStyles = _interopRequireDefault$b(ansiStyles.exports);
	var _collections = collections;
	var _AsymmetricMatcher = _interopRequireDefault$b(AsymmetricMatcher);
	var _ConvertAnsi = _interopRequireDefault$b(ConvertAnsi);
	var _DOMCollection = _interopRequireDefault$b(DOMCollection$1);
	var _DOMElement = _interopRequireDefault$b(DOMElement);
	var _Immutable = _interopRequireDefault$b(Immutable);
	var _ReactElement = _interopRequireDefault$b(ReactElement);
	var _ReactTestComponent = _interopRequireDefault$b(ReactTestComponent);
	function _interopRequireDefault$b(obj) {
	  return obj && obj.__esModule ? obj : {
	    default: obj
	  };
	}

	/**
	 * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	/* eslint-disable local/ban-types-eventually */
	const toString$1 = Object.prototype.toString;
	const toISOString = Date.prototype.toISOString;
	const errorToString = Error.prototype.toString;
	const regExpToString = RegExp.prototype.toString;
	/**
	 * Explicitly comparing typeof constructor to function avoids undefined as name
	 * when mock identity-obj-proxy returns the key as the value for any key.
	 */

	const getConstructorName = val => typeof val.constructor === 'function' && val.constructor.name || 'Object';
	/* global window */

	/** Is val is equal to global window object? Works even if it does not exist :) */

	const isWindow = val => typeof window !== 'undefined' && val === window;
	const SYMBOL_REGEXP = /^Symbol\((.*)\)(.*)$/;
	const NEWLINE_REGEXP = /\n/gi;
	class PrettyFormatPluginError extends Error {
	  constructor(message, stack) {
	    super(message);
	    this.stack = stack;
	    this.name = this.constructor.name;
	  }
	}
	function isToStringedArrayType(toStringed) {
	  return toStringed === '[object Array]' || toStringed === '[object ArrayBuffer]' || toStringed === '[object DataView]' || toStringed === '[object Float32Array]' || toStringed === '[object Float64Array]' || toStringed === '[object Int8Array]' || toStringed === '[object Int16Array]' || toStringed === '[object Int32Array]' || toStringed === '[object Uint8Array]' || toStringed === '[object Uint8ClampedArray]' || toStringed === '[object Uint16Array]' || toStringed === '[object Uint32Array]';
	}
	function printNumber(val) {
	  return Object.is(val, -0) ? '-0' : String(val);
	}
	function printBigInt(val) {
	  return String(val + "n");
	}
	function printFunction(val, printFunctionName) {
	  if (!printFunctionName) {
	    return '[Function]';
	  }
	  return '[Function ' + (val.name || 'anonymous') + ']';
	}
	function printSymbol(val) {
	  return String(val).replace(SYMBOL_REGEXP, 'Symbol($1)');
	}
	function printError(val) {
	  return '[' + errorToString.call(val) + ']';
	}
	/**
	 * The first port of call for printing an object, handles most of the
	 * data-types in JS.
	 */

	function printBasicValue(val, printFunctionName, escapeRegex, escapeString) {
	  if (val === true || val === false) {
	    return '' + val;
	  }
	  if (val === undefined) {
	    return 'undefined';
	  }
	  if (val === null) {
	    return 'null';
	  }
	  const typeOf = typeof val;
	  if (typeOf === 'number') {
	    return printNumber(val);
	  }
	  if (typeOf === 'bigint') {
	    return printBigInt(val);
	  }
	  if (typeOf === 'string') {
	    if (escapeString) {
	      return '"' + val.replace(/"|\\/g, '\\$&') + '"';
	    }
	    return '"' + val + '"';
	  }
	  if (typeOf === 'function') {
	    return printFunction(val, printFunctionName);
	  }
	  if (typeOf === 'symbol') {
	    return printSymbol(val);
	  }
	  const toStringed = toString$1.call(val);
	  if (toStringed === '[object WeakMap]') {
	    return 'WeakMap {}';
	  }
	  if (toStringed === '[object WeakSet]') {
	    return 'WeakSet {}';
	  }
	  if (toStringed === '[object Function]' || toStringed === '[object GeneratorFunction]') {
	    return printFunction(val, printFunctionName);
	  }
	  if (toStringed === '[object Symbol]') {
	    return printSymbol(val);
	  }
	  if (toStringed === '[object Date]') {
	    return isNaN(+val) ? 'Date { NaN }' : toISOString.call(val);
	  }
	  if (toStringed === '[object Error]') {
	    return printError(val);
	  }
	  if (toStringed === '[object RegExp]') {
	    if (escapeRegex) {
	      // https://github.com/benjamingr/RegExp.escape/blob/main/polyfill.js
	      return regExpToString.call(val).replace(/[\\^$*+?.()|[\]{}]/g, '\\$&');
	    }
	    return regExpToString.call(val);
	  }
	  if (val instanceof Error) {
	    return printError(val);
	  }
	  return null;
	}
	/**
	 * Handles more complex objects ( such as objects with circular references.
	 * maps and sets etc )
	 */

	function printComplexValue(val, config, indentation, depth, refs, hasCalledToJSON) {
	  if (refs.indexOf(val) !== -1) {
	    return '[Circular]';
	  }
	  refs = refs.slice();
	  refs.push(val);
	  const hitMaxDepth = ++depth > config.maxDepth;
	  const min = config.min;
	  if (config.callToJSON && !hitMaxDepth && val.toJSON && typeof val.toJSON === 'function' && !hasCalledToJSON) {
	    return printer(val.toJSON(), config, indentation, depth, refs, true);
	  }
	  const toStringed = toString$1.call(val);
	  if (toStringed === '[object Arguments]') {
	    return hitMaxDepth ? '[Arguments]' : (min ? '' : 'Arguments ') + '[' + (0, _collections.printListItems)(val, config, indentation, depth, refs, printer) + ']';
	  }
	  if (isToStringedArrayType(toStringed)) {
	    return hitMaxDepth ? '[' + val.constructor.name + ']' : (min ? '' : !config.printBasicPrototype && val.constructor.name === 'Array' ? '' : val.constructor.name + ' ') + '[' + (0, _collections.printListItems)(val, config, indentation, depth, refs, printer) + ']';
	  }
	  if (toStringed === '[object Map]') {
	    return hitMaxDepth ? '[Map]' : 'Map {' + (0, _collections.printIteratorEntries)(val.entries(), config, indentation, depth, refs, printer, ' => ') + '}';
	  }
	  if (toStringed === '[object Set]') {
	    return hitMaxDepth ? '[Set]' : 'Set {' + (0, _collections.printIteratorValues)(val.values(), config, indentation, depth, refs, printer) + '}';
	  } // Avoid failure to serialize global window object in jsdom test environment.
	  // For example, not even relevant if window is prop of React element.

	  return hitMaxDepth || isWindow(val) ? '[' + getConstructorName(val) + ']' : (min ? '' : !config.printBasicPrototype && getConstructorName(val) === 'Object' ? '' : getConstructorName(val) + ' ') + '{' + (0, _collections.printObjectProperties)(val, config, indentation, depth, refs, printer) + '}';
	}
	function isNewPlugin(plugin) {
	  return plugin.serialize != null;
	}
	function printPlugin(plugin, val, config, indentation, depth, refs) {
	  let printed;
	  try {
	    printed = isNewPlugin(plugin) ? plugin.serialize(val, config, indentation, depth, refs, printer) : plugin.print(val, valChild => printer(valChild, config, indentation, depth, refs), str => {
	      const indentationNext = indentation + config.indent;
	      return indentationNext + str.replace(NEWLINE_REGEXP, '\n' + indentationNext);
	    }, {
	      edgeSpacing: config.spacingOuter,
	      min: config.min,
	      spacing: config.spacingInner
	    }, config.colors);
	  } catch (error) {
	    throw new PrettyFormatPluginError(error.message, error.stack);
	  }
	  if (typeof printed !== 'string') {
	    throw new Error("pretty-format: Plugin must return type \"string\" but instead returned \"" + typeof printed + "\".");
	  }
	  return printed;
	}
	function findPlugin(plugins, val) {
	  for (let p = 0; p < plugins.length; p++) {
	    try {
	      if (plugins[p].test(val)) {
	        return plugins[p];
	      }
	    } catch (error) {
	      throw new PrettyFormatPluginError(error.message, error.stack);
	    }
	  }
	  return null;
	}
	function printer(val, config, indentation, depth, refs, hasCalledToJSON) {
	  const plugin = findPlugin(config.plugins, val);
	  if (plugin !== null) {
	    return printPlugin(plugin, val, config, indentation, depth, refs);
	  }
	  const basicResult = printBasicValue(val, config.printFunctionName, config.escapeRegex, config.escapeString);
	  if (basicResult !== null) {
	    return basicResult;
	  }
	  return printComplexValue(val, config, indentation, depth, refs, hasCalledToJSON);
	}
	const DEFAULT_THEME = {
	  comment: 'gray',
	  content: 'reset',
	  prop: 'yellow',
	  tag: 'cyan',
	  value: 'green'
	};
	const DEFAULT_THEME_KEYS = Object.keys(DEFAULT_THEME);
	const DEFAULT_OPTIONS = {
	  callToJSON: true,
	  compareKeys: undefined,
	  escapeRegex: false,
	  escapeString: true,
	  highlight: false,
	  indent: 2,
	  maxDepth: Infinity,
	  min: false,
	  plugins: [],
	  printBasicPrototype: true,
	  printFunctionName: true,
	  theme: DEFAULT_THEME
	};
	var DEFAULT_OPTIONS_1 = build.DEFAULT_OPTIONS = DEFAULT_OPTIONS;
	function validateOptions(options) {
	  Object.keys(options).forEach(key => {
	    if (!DEFAULT_OPTIONS.hasOwnProperty(key)) {
	      throw new Error("pretty-format: Unknown option \"" + key + "\".");
	    }
	  });
	  if (options.min && options.indent !== undefined && options.indent !== 0) {
	    throw new Error('pretty-format: Options "min" and "indent" cannot be used together.');
	  }
	  if (options.theme !== undefined) {
	    if (options.theme === null) {
	      throw new Error('pretty-format: Option "theme" must not be null.');
	    }
	    if (typeof options.theme !== 'object') {
	      throw new Error("pretty-format: Option \"theme\" must be of type \"object\" but instead received \"" + typeof options.theme + "\".");
	    }
	  }
	}
	const getColorsHighlight = options => DEFAULT_THEME_KEYS.reduce((colors, key) => {
	  const value = options.theme && options.theme[key] !== undefined ? options.theme[key] : DEFAULT_THEME[key];
	  const color = value && _ansiStyles.default[value];
	  if (color && typeof color.close === 'string' && typeof color.open === 'string') {
	    colors[key] = color;
	  } else {
	    throw new Error("pretty-format: Option \"theme\" has a key \"" + key + "\" whose value \"" + value + "\" is undefined in ansi-styles.");
	  }
	  return colors;
	}, Object.create(null));
	const getColorsEmpty = () => DEFAULT_THEME_KEYS.reduce((colors, key) => {
	  colors[key] = {
	    close: '',
	    open: ''
	  };
	  return colors;
	}, Object.create(null));
	const getPrintFunctionName = options => options && options.printFunctionName !== undefined ? options.printFunctionName : DEFAULT_OPTIONS.printFunctionName;
	const getEscapeRegex = options => options && options.escapeRegex !== undefined ? options.escapeRegex : DEFAULT_OPTIONS.escapeRegex;
	const getEscapeString = options => options && options.escapeString !== undefined ? options.escapeString : DEFAULT_OPTIONS.escapeString;
	const getConfig$1 = options => {
	  var _options$printBasicPr;
	  return {
	    callToJSON: options && options.callToJSON !== undefined ? options.callToJSON : DEFAULT_OPTIONS.callToJSON,
	    colors: options && options.highlight ? getColorsHighlight(options) : getColorsEmpty(),
	    compareKeys: options && typeof options.compareKeys === 'function' ? options.compareKeys : DEFAULT_OPTIONS.compareKeys,
	    escapeRegex: getEscapeRegex(options),
	    escapeString: getEscapeString(options),
	    indent: options && options.min ? '' : createIndent(options && options.indent !== undefined ? options.indent : DEFAULT_OPTIONS.indent),
	    maxDepth: options && options.maxDepth !== undefined ? options.maxDepth : DEFAULT_OPTIONS.maxDepth,
	    min: options && options.min !== undefined ? options.min : DEFAULT_OPTIONS.min,
	    plugins: options && options.plugins !== undefined ? options.plugins : DEFAULT_OPTIONS.plugins,
	    printBasicPrototype: (_options$printBasicPr = options === null || options === void 0 ? void 0 : options.printBasicPrototype) !== null && _options$printBasicPr !== void 0 ? _options$printBasicPr : true,
	    printFunctionName: getPrintFunctionName(options),
	    spacingInner: options && options.min ? ' ' : '\n',
	    spacingOuter: options && options.min ? '' : '\n'
	  };
	};
	function createIndent(indent) {
	  return new Array(indent + 1).join(' ');
	}
	/**
	 * Returns a presentation string of your `val` object
	 * @param val any potential JavaScript object
	 * @param options Custom settings
	 */

	function format(val, options) {
	  if (options) {
	    validateOptions(options);
	    if (options.plugins) {
	      const plugin = findPlugin(options.plugins, val);
	      if (plugin !== null) {
	        return printPlugin(plugin, val, getConfig$1(options), '', 0, []);
	      }
	    }
	  }
	  const basicResult = printBasicValue(val, getPrintFunctionName(options), getEscapeRegex(options), getEscapeString(options));
	  if (basicResult !== null) {
	    return basicResult;
	  }
	  return printComplexValue(val, getConfig$1(options), '', 0, []);
	}
	const plugins = {
	  AsymmetricMatcher: _AsymmetricMatcher.default,
	  ConvertAnsi: _ConvertAnsi.default,
	  DOMCollection: _DOMCollection.default,
	  DOMElement: _DOMElement.default,
	  Immutable: _Immutable.default,
	  ReactElement: _ReactElement.default,
	  ReactTestComponent: _ReactTestComponent.default
	};
	plugins_1 = build.plugins = plugins;
	var _default$2i = format;
	default_1 = build.default = _default$2i;

	var index = /*#__PURE__*/_mergeNamespaces({
		__proto__: null,
		get DEFAULT_OPTIONS () { return DEFAULT_OPTIONS_1; },
		format: format_1,
		get plugins () { return plugins_1; },
		get default () { return default_1; }
	}, [build]);

	/**
	 * Source: https://github.com/facebook/jest/blob/e7bb6a1e26ffab90611b2593912df15b69315611/packages/pretty-format/src/plugins/DOMElement.ts
	 */
	/* eslint-disable -- trying to stay as close to the original as possible */
	/* istanbul ignore file */

	function escapeHTML(str) {
	  return str.replace(/</g, '&lt;').replace(/>/g, '&gt;');
	}
	// Return empty string if keys is empty.
	const printProps = (keys, props, config, indentation, depth, refs, printer) => {
	  const indentationNext = indentation + config.indent;
	  const colors = config.colors;
	  return keys.map(key => {
	    const value = props[key];
	    let printed = printer(value, config, indentationNext, depth, refs);
	    if (typeof value !== 'string') {
	      if (printed.indexOf('\n') !== -1) {
	        printed = config.spacingOuter + indentationNext + printed + config.spacingOuter + indentation;
	      }
	      printed = '{' + printed + '}';
	    }
	    return config.spacingInner + indentation + colors.prop.open + key + colors.prop.close + '=' + colors.value.open + printed + colors.value.close;
	  }).join('');
	};

	// https://developer.mozilla.org/en-US/docs/Web/API/Node/nodeType#node_type_constants
	const NodeTypeTextNode = 3;

	// Return empty string if children is empty.
	const printChildren = (children, config, indentation, depth, refs, printer) => children.map(child => {
	  const printedChild = typeof child === 'string' ? printText(child, config) : printer(child, config, indentation, depth, refs);
	  if (printedChild === '' && typeof child === 'object' && child !== null && child.nodeType !== NodeTypeTextNode) {
	    // A plugin serialized this Node to '' meaning we should ignore it.
	    return '';
	  }
	  return config.spacingOuter + indentation + printedChild;
	}).join('');
	const printText = (text, config) => {
	  const contentColor = config.colors.content;
	  return contentColor.open + escapeHTML(text) + contentColor.close;
	};
	const printComment = (comment, config) => {
	  const commentColor = config.colors.comment;
	  return commentColor.open + '<!--' + escapeHTML(comment) + '-->' + commentColor.close;
	};

	// Separate the functions to format props, children, and element,
	// so a plugin could override a particular function, if needed.
	// Too bad, so sad: the traditional (but unnecessary) space
	// in a self-closing tagColor requires a second test of printedProps.
	const printElement = (type, printedProps, printedChildren, config, indentation) => {
	  const tagColor = config.colors.tag;
	  return tagColor.open + '<' + type + (printedProps && tagColor.close + printedProps + config.spacingOuter + indentation + tagColor.open) + (printedChildren ? '>' + tagColor.close + printedChildren + config.spacingOuter + indentation + tagColor.open + '</' + type : (printedProps && !config.min ? '' : ' ') + '/') + '>' + tagColor.close;
	};
	const printElementAsLeaf = (type, config) => {
	  const tagColor = config.colors.tag;
	  return tagColor.open + '<' + type + tagColor.close + ' …' + tagColor.open + ' />' + tagColor.close;
	};
	const ELEMENT_NODE$1 = 1;
	const TEXT_NODE$1 = 3;
	const COMMENT_NODE$1 = 8;
	const FRAGMENT_NODE = 11;
	const ELEMENT_REGEXP = /^((HTML|SVG)\w*)?Element$/;
	const testNode = val => {
	  const constructorName = val.constructor.name;
	  const {
	    nodeType,
	    tagName
	  } = val;
	  const isCustomElement = typeof tagName === 'string' && tagName.includes('-') || typeof val.hasAttribute === 'function' && val.hasAttribute('is');
	  return nodeType === ELEMENT_NODE$1 && (ELEMENT_REGEXP.test(constructorName) || isCustomElement) || nodeType === TEXT_NODE$1 && constructorName === 'Text' || nodeType === COMMENT_NODE$1 && constructorName === 'Comment' || nodeType === FRAGMENT_NODE && constructorName === 'DocumentFragment';
	};
	function nodeIsText(node) {
	  return node.nodeType === TEXT_NODE$1;
	}
	function nodeIsComment(node) {
	  return node.nodeType === COMMENT_NODE$1;
	}
	function nodeIsFragment(node) {
	  return node.nodeType === FRAGMENT_NODE;
	}
	function createDOMElementFilter(filterNode) {
	  return {
	    test: val => {
	      var _val$constructor2;
	      return (val == null ? void 0 : (_val$constructor2 = val.constructor) == null ? void 0 : _val$constructor2.name) && testNode(val);
	    },
	    serialize: (node, config, indentation, depth, refs, printer) => {
	      if (nodeIsText(node)) {
	        return printText(node.data, config);
	      }
	      if (nodeIsComment(node)) {
	        return printComment(node.data, config);
	      }
	      const type = nodeIsFragment(node) ? "DocumentFragment" : node.tagName.toLowerCase();
	      if (++depth > config.maxDepth) {
	        return printElementAsLeaf(type, config);
	      }
	      return printElement(type, printProps(nodeIsFragment(node) ? [] : Array.from(node.attributes).map(attr => attr.name).sort(), nodeIsFragment(node) ? {} : Array.from(node.attributes).reduce((props, attribute) => {
	        props[attribute.name] = attribute.value;
	        return props;
	      }, {}), config, indentation + config.indent, depth, refs, printer), printChildren(Array.prototype.slice.call(node.childNodes || node.children).filter(filterNode), config, indentation + config.indent, depth, refs, printer), config, indentation);
	    }
	  };
	}

	// We try to load node dependencies
	let chalk = null;
	let readFileSync = null;
	let codeFrameColumns = null;
	try {
	  const nodeRequire = module && module.require;
	  readFileSync = nodeRequire.call(module, 'fs').readFileSync;
	  codeFrameColumns = nodeRequire.call(module, '@babel/code-frame').codeFrameColumns;
	  chalk = nodeRequire.call(module, 'chalk');
	} catch {
	  // We're in a browser environment
	}

	// frame has the form "at myMethod (location/to/my/file.js:10:2)"
	function getCodeFrame(frame) {
	  const locationStart = frame.indexOf('(') + 1;
	  const locationEnd = frame.indexOf(')');
	  const frameLocation = frame.slice(locationStart, locationEnd);
	  const frameLocationElements = frameLocation.split(':');
	  const [filename, line, column] = [frameLocationElements[0], parseInt(frameLocationElements[1], 10), parseInt(frameLocationElements[2], 10)];
	  let rawFileContents = '';
	  try {
	    rawFileContents = readFileSync(filename, 'utf-8');
	  } catch {
	    return '';
	  }
	  const codeFrame = codeFrameColumns(rawFileContents, {
	    start: {
	      line,
	      column
	    }
	  }, {
	    highlightCode: true,
	    linesBelow: 0
	  });
	  return chalk.dim(frameLocation) + "\n" + codeFrame + "\n";
	}
	function getUserCodeFrame() {
	  // If we couldn't load dependencies, we can't generate the user trace
	  /* istanbul ignore next */
	  if (!readFileSync || !codeFrameColumns) {
	    return '';
	  }
	  const err = new Error();
	  const firstClientCodeFrame = err.stack.split('\n').slice(1) // Remove first line which has the form "Error: TypeError"
	  .find(frame => !frame.includes('node_modules/')); // Ignore frames from 3rd party libraries

	  return getCodeFrame(firstClientCodeFrame);
	}

	// Constant node.nodeType for text nodes, see:
	// https://developer.mozilla.org/en-US/docs/Web/API/Node/nodeType#Node_type_constants
	const TEXT_NODE = 3;
	function jestFakeTimersAreEnabled() {
	  /* istanbul ignore else */
	  // eslint-disable-next-line
	  if (typeof jest !== 'undefined' && jest !== null) {
	    return (
	      // legacy timers
	      setTimeout._isMockFunction === true ||
	      // modern timers
	      Object.prototype.hasOwnProperty.call(setTimeout, 'clock')
	    );
	  }
	  // istanbul ignore next
	  return false;
	}
	function getDocument() {
	  /* istanbul ignore if */
	  if (typeof window === 'undefined') {
	    throw new Error('Could not find default container');
	  }
	  return window.document;
	}
	function getWindowFromNode(node) {
	  if (node.defaultView) {
	    // node is document
	    return node.defaultView;
	  } else if (node.ownerDocument && node.ownerDocument.defaultView) {
	    // node is a DOM node
	    return node.ownerDocument.defaultView;
	  } else if (node.window) {
	    // node is window
	    return node.window;
	  } else if (node.ownerDocument && node.ownerDocument.defaultView === null) {
	    throw new Error("It looks like the window object is not available for the provided node.");
	  } else if (node.then instanceof Function) {
	    throw new Error("It looks like you passed a Promise object instead of a DOM node. Did you do something like `fireEvent.click(screen.findBy...` when you meant to use a `getBy` query `fireEvent.click(screen.getBy...`, or await the findBy query `fireEvent.click(await screen.findBy...`?");
	  } else if (Array.isArray(node)) {
	    throw new Error("It looks like you passed an Array instead of a DOM node. Did you do something like `fireEvent.click(screen.getAllBy...` when you meant to use a `getBy` query `fireEvent.click(screen.getBy...`?");
	  } else if (typeof node.debug === 'function' && typeof node.logTestingPlaygroundURL === 'function') {
	    throw new Error("It looks like you passed a `screen` object. Did you do something like `fireEvent.click(screen, ...` when you meant to use a query, e.g. `fireEvent.click(screen.getBy..., `?");
	  } else {
	    // The user passed something unusual to a calling function
	    throw new Error("The given node is not an Element, the node type is: " + typeof node + ".");
	  }
	}
	function checkContainerType(container) {
	  if (!container || !(typeof container.querySelector === 'function') || !(typeof container.querySelectorAll === 'function')) {
	    throw new TypeError("Expected container to be an Element, a Document or a DocumentFragment but got " + getTypeName(container) + ".");
	  }
	  function getTypeName(object) {
	    if (typeof object === 'object') {
	      return object === null ? 'null' : object.constructor.name;
	    }
	    return typeof object;
	  }
	}

	const shouldHighlight = () => {
	  let colors;
	  try {
	    var _process, _process$env;
	    colors = JSON.parse((_process = process) == null ? void 0 : (_process$env = _process.env) == null ? void 0 : _process$env.COLORS);
	  } catch (e) {
	    // If this throws, process?.env?.COLORS wasn't parsable. Since we only
	    // care about `true` or `false`, we can safely ignore the error.
	  }
	  if (typeof colors === 'boolean') {
	    // If `colors` is set explicitly (both `true` and `false`), use that value.
	    return colors;
	  } else {
	    // If `colors` is not set, colorize if we're in node.
	    return typeof process !== 'undefined' && process.versions !== undefined && process.versions.node !== undefined;
	  }
	};
	const {
	  DOMCollection
	} = plugins_1;

	// https://developer.mozilla.org/en-US/docs/Web/API/Node/nodeType#node_type_constants
	const ELEMENT_NODE = 1;
	const COMMENT_NODE = 8;

	// https://github.com/facebook/jest/blob/615084195ae1ae61ddd56162c62bbdda17587569/packages/pretty-format/src/plugins/DOMElement.ts#L50
	function filterCommentsAndDefaultIgnoreTagsTags(value) {
	  return value.nodeType !== COMMENT_NODE && (value.nodeType !== ELEMENT_NODE || !value.matches(getConfig().defaultIgnore));
	}
	function prettyDOM(dom, maxLength, options) {
	  if (options === void 0) {
	    options = {};
	  }
	  if (!dom) {
	    dom = getDocument().body;
	  }
	  if (typeof maxLength !== 'number') {
	    maxLength = typeof process !== 'undefined' && undefined || 7000;
	  }
	  if (maxLength === 0) {
	    return '';
	  }
	  if (dom.documentElement) {
	    dom = dom.documentElement;
	  }
	  let domTypeName = typeof dom;
	  if (domTypeName === 'object') {
	    domTypeName = dom.constructor.name;
	  } else {
	    // To don't fall with `in` operator
	    dom = {};
	  }
	  if (!('outerHTML' in dom)) {
	    throw new TypeError("Expected an element or document but got " + domTypeName);
	  }
	  const {
	    filterNode = filterCommentsAndDefaultIgnoreTagsTags,
	    ...prettyFormatOptions
	  } = options;
	  const debugContent = format_1(dom, {
	    plugins: [createDOMElementFilter(filterNode), DOMCollection],
	    printFunctionName: false,
	    highlight: shouldHighlight(),
	    ...prettyFormatOptions
	  });
	  return maxLength !== undefined && dom.outerHTML.length > maxLength ? debugContent.slice(0, maxLength) + "..." : debugContent;
	}
	const logDOM = function () {
	  const userCodeFrame = getUserCodeFrame();
	  if (userCodeFrame) {
	    console.log(prettyDOM(...arguments) + "\n\n" + userCodeFrame);
	  } else {
	    console.log(prettyDOM(...arguments));
	  }
	};

	// It would be cleaner for this to live inside './queries', but
	// other parts of the code assume that all exports from
	// './queries' are query functions.
	let config = {
	  testIdAttribute: 'data-testid',
	  asyncUtilTimeout: 1000,
	  // asyncWrapper and advanceTimersWrapper is to support React's async `act` function.
	  // forcing react-testing-library to wrap all async functions would've been
	  // a total nightmare (consider wrapping every findBy* query and then also
	  // updating `within` so those would be wrapped too. Total nightmare).
	  // so we have this config option that's really only intended for
	  // react-testing-library to use. For that reason, this feature will remain
	  // undocumented.
	  asyncWrapper: cb => cb(),
	  unstable_advanceTimersWrapper: cb => cb(),
	  eventWrapper: cb => cb(),
	  // default value for the `hidden` option in `ByRole` queries
	  defaultHidden: false,
	  // default value for the `ignore` option in `ByText` queries
	  defaultIgnore: 'script, style',
	  // showOriginalStackTrace flag to show the full error stack traces for async errors
	  showOriginalStackTrace: false,
	  // throw errors w/ suggestions for better queries. Opt in so off by default.
	  throwSuggestions: false,
	  // called when getBy* queries fail. (message, container) => Error
	  getElementError(message, container) {
	    const prettifiedDOM = prettyDOM(container);
	    const error = new Error([message, "Ignored nodes: comments, " + config.defaultIgnore + "\n" + prettifiedDOM].filter(Boolean).join('\n\n'));
	    error.name = 'TestingLibraryElementError';
	    return error;
	  },
	  _disableExpensiveErrorDiagnostics: false,
	  computedStyleSupportsPseudoElements: false
	};
	function runWithExpensiveErrorDiagnosticsDisabled(callback) {
	  try {
	    config._disableExpensiveErrorDiagnostics = true;
	    return callback();
	  } finally {
	    config._disableExpensiveErrorDiagnostics = false;
	  }
	}
	function configure(newConfig) {
	  if (typeof newConfig === 'function') {
	    // Pass the existing config out to the provided function
	    // and accept a delta in return
	    newConfig = newConfig(config);
	  }

	  // Merge the incoming config delta
	  config = {
	    ...config,
	    ...newConfig
	  };
	}
	function getConfig() {
	  return config;
	}

	const labelledNodeNames = ['button', 'meter', 'output', 'progress', 'select', 'textarea', 'input'];
	function getTextContent(node) {
	  if (labelledNodeNames.includes(node.nodeName.toLowerCase())) {
	    return '';
	  }
	  if (node.nodeType === TEXT_NODE) return node.textContent;
	  return Array.from(node.childNodes).map(childNode => getTextContent(childNode)).join('');
	}
	function getLabelContent(element) {
	  let textContent;
	  if (element.tagName.toLowerCase() === 'label') {
	    textContent = getTextContent(element);
	  } else {
	    textContent = element.value || element.textContent;
	  }
	  return textContent;
	}

	// Based on https://github.com/eps1lon/dom-accessibility-api/pull/352
	function getRealLabels(element) {
	  // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition -- types are not aware of older browsers that don't implement `labels`
	  if (element.labels !== undefined) {
	    var _labels;
	    return (_labels = element.labels) != null ? _labels : [];
	  }
	  if (!isLabelable(element)) return [];
	  const labels = element.ownerDocument.querySelectorAll('label');
	  return Array.from(labels).filter(label => label.control === element);
	}
	function isLabelable(element) {
	  return /BUTTON|METER|OUTPUT|PROGRESS|SELECT|TEXTAREA/.test(element.tagName) || element.tagName === 'INPUT' && element.getAttribute('type') !== 'hidden';
	}
	function getLabels$1(container, element, _temp) {
	  let {
	    selector = '*'
	  } = _temp === void 0 ? {} : _temp;
	  const ariaLabelledBy = element.getAttribute('aria-labelledby');
	  const labelsId = ariaLabelledBy ? ariaLabelledBy.split(' ') : [];
	  return labelsId.length ? labelsId.map(labelId => {
	    const labellingElement = container.querySelector("[id=\"" + labelId + "\"]");
	    return labellingElement ? {
	      content: getLabelContent(labellingElement),
	      formControl: null
	    } : {
	      content: '',
	      formControl: null
	    };
	  }) : Array.from(getRealLabels(element)).map(label => {
	    const textToMatch = getLabelContent(label);
	    const formControlSelector = 'button, input, meter, output, progress, select, textarea';
	    const labelledFormControl = Array.from(label.querySelectorAll(formControlSelector)).filter(formControlElement => formControlElement.matches(selector))[0];
	    return {
	      content: textToMatch,
	      formControl: labelledFormControl
	    };
	  });
	}

	function assertNotNullOrUndefined(matcher) {
	  if (matcher === null || matcher === undefined) {
	    throw new Error( // eslint-disable-next-line @typescript-eslint/restrict-template-expressions -- implicitly converting `T` to `string`
	    "It looks like " + matcher + " was passed instead of a matcher. Did you do something like getByText(" + matcher + ")?");
	  }
	}
	function fuzzyMatches(textToMatch, node, matcher, normalizer) {
	  if (typeof textToMatch !== 'string') {
	    return false;
	  }
	  assertNotNullOrUndefined(matcher);
	  const normalizedText = normalizer(textToMatch);
	  if (typeof matcher === 'string' || typeof matcher === 'number') {
	    return normalizedText.toLowerCase().includes(matcher.toString().toLowerCase());
	  } else if (typeof matcher === 'function') {
	    return matcher(normalizedText, node);
	  } else {
	    return matchRegExp(matcher, normalizedText);
	  }
	}
	function matches(textToMatch, node, matcher, normalizer) {
	  if (typeof textToMatch !== 'string') {
	    return false;
	  }
	  assertNotNullOrUndefined(matcher);
	  const normalizedText = normalizer(textToMatch);
	  if (matcher instanceof Function) {
	    return matcher(normalizedText, node);
	  } else if (matcher instanceof RegExp) {
	    return matchRegExp(matcher, normalizedText);
	  } else {
	    return normalizedText === String(matcher);
	  }
	}
	function getDefaultNormalizer(_temp) {
	  let {
	    trim = true,
	    collapseWhitespace = true
	  } = _temp === void 0 ? {} : _temp;
	  return text => {
	    let normalizedText = text;
	    normalizedText = trim ? normalizedText.trim() : normalizedText;
	    normalizedText = collapseWhitespace ? normalizedText.replace(/\s+/g, ' ') : normalizedText;
	    return normalizedText;
	  };
	}

	/**
	 * Constructs a normalizer to pass to functions in matches.js
	 * @param {boolean|undefined} trim The user-specified value for `trim`, without
	 * any defaulting having been applied
	 * @param {boolean|undefined} collapseWhitespace The user-specified value for
	 * `collapseWhitespace`, without any defaulting having been applied
	 * @param {Function|undefined} normalizer The user-specified normalizer
	 * @returns {Function} A normalizer
	 */

	function makeNormalizer(_ref) {
	  let {
	    trim,
	    collapseWhitespace,
	    normalizer
	  } = _ref;
	  if (!normalizer) {
	    // No custom normalizer specified. Just use default.
	    return getDefaultNormalizer({
	      trim,
	      collapseWhitespace
	    });
	  }
	  if (typeof trim !== 'undefined' || typeof collapseWhitespace !== 'undefined') {
	    // They've also specified a value for trim or collapseWhitespace
	    throw new Error('trim and collapseWhitespace are not supported with a normalizer. ' + 'If you want to use the default trim and collapseWhitespace logic in your normalizer, ' + 'use "getDefaultNormalizer({trim, collapseWhitespace})" and compose that into your normalizer');
	  }
	  return normalizer;
	}
	function matchRegExp(matcher, text) {
	  const match = matcher.test(text);
	  if (matcher.global && matcher.lastIndex !== 0) {
	    console.warn("To match all elements we had to reset the lastIndex of the RegExp because the global flag is enabled. We encourage to remove the global flag from the RegExp.");
	    matcher.lastIndex = 0;
	  }
	  return match;
	}

	function getNodeText(node) {
	  if (node.matches('input[type=submit], input[type=button], input[type=reset]')) {
	    return node.value;
	  }
	  return Array.from(node.childNodes).filter(child => child.nodeType === TEXT_NODE && Boolean(child.textContent)).map(c => c.textContent).join('');
	}

	/**
	 * @source {https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from#Polyfill}
	 * but without thisArg (too hard to type, no need to `this`)
	 */
	var toStr$b = Object.prototype.toString;
	function isCallable$2(fn) {
	  return typeof fn === "function" || toStr$b.call(fn) === "[object Function]";
	}
	function toInteger(value) {
	  var number = Number(value);
	  if (isNaN(number)) {
	    return 0;
	  }
	  if (number === 0 || !isFinite(number)) {
	    return number;
	  }
	  return (number > 0 ? 1 : -1) * Math.floor(Math.abs(number));
	}
	var maxSafeInteger = Math.pow(2, 53) - 1;
	function toLength(value) {
	  var len = toInteger(value);
	  return Math.min(Math.max(len, 0), maxSafeInteger);
	}
	/**
	 * Creates an array from an iterable object.
	 * @param iterable An iterable object to convert to an array.
	 */

	/**
	 * Creates an array from an iterable object.
	 * @param iterable An iterable object to convert to an array.
	 * @param mapfn A mapping function to call on every element of the array.
	 * @param thisArg Value of 'this' used to invoke the mapfn.
	 */
	function arrayFrom(arrayLike, mapFn) {
	  // 1. Let C be the this value.
	  // edit(@eps1lon): we're not calling it as Array.from
	  var C = Array;

	  // 2. Let items be ToObject(arrayLike).
	  var items = Object(arrayLike);

	  // 3. ReturnIfAbrupt(items).
	  if (arrayLike == null) {
	    throw new TypeError("Array.from requires an array-like object - not null or undefined");
	  }

	  // 4. If mapfn is undefined, then let mapping be false.
	  // const mapFn = arguments.length > 1 ? arguments[1] : void undefined;

	  if (typeof mapFn !== "undefined") {
	    // 5. else
	    // 5. a If IsCallable(mapfn) is false, throw a TypeError exception.
	    if (!isCallable$2(mapFn)) {
	      throw new TypeError("Array.from: when provided, the second argument must be a function");
	    }
	  }

	  // 10. Let lenValue be Get(items, "length").
	  // 11. Let len be ToLength(lenValue).
	  var len = toLength(items.length);

	  // 13. If IsConstructor(C) is true, then
	  // 13. a. Let A be the result of calling the [[Construct]] internal method
	  // of C with an argument list containing the single item len.
	  // 14. a. Else, Let A be ArrayCreate(len).
	  var A = isCallable$2(C) ? Object(new C(len)) : new Array(len);

	  // 16. Let k be 0.
	  var k = 0;
	  // 17. Repeat, while k < len… (also steps a - h)
	  var kValue;
	  while (k < len) {
	    kValue = items[k];
	    if (mapFn) {
	      A[k] = mapFn(kValue, k);
	    } else {
	      A[k] = kValue;
	    }
	    k += 1;
	  }
	  // 18. Let putStatus be Put(A, "length", len, true).
	  A.length = len;
	  // 20. Return A.
	  return A;
	}

	function _typeof$2(obj) {
	  "@babel/helpers - typeof";

	  return _typeof$2 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {
	    return typeof obj;
	  } : function (obj) {
	    return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
	  }, _typeof$2(obj);
	}
	function _classCallCheck(instance, Constructor) {
	  if (!(instance instanceof Constructor)) {
	    throw new TypeError("Cannot call a class as a function");
	  }
	}
	function _defineProperties(target, props) {
	  for (var i = 0; i < props.length; i++) {
	    var descriptor = props[i];
	    descriptor.enumerable = descriptor.enumerable || false;
	    descriptor.configurable = true;
	    if ("value" in descriptor) descriptor.writable = true;
	    Object.defineProperty(target, _toPropertyKey$1(descriptor.key), descriptor);
	  }
	}
	function _createClass(Constructor, protoProps, staticProps) {
	  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
	  if (staticProps) _defineProperties(Constructor, staticProps);
	  Object.defineProperty(Constructor, "prototype", {
	    writable: false
	  });
	  return Constructor;
	}
	function _defineProperty$2(obj, key, value) {
	  key = _toPropertyKey$1(key);
	  if (key in obj) {
	    Object.defineProperty(obj, key, {
	      value: value,
	      enumerable: true,
	      configurable: true,
	      writable: true
	    });
	  } else {
	    obj[key] = value;
	  }
	  return obj;
	}
	function _toPropertyKey$1(arg) {
	  var key = _toPrimitive$1(arg, "string");
	  return _typeof$2(key) === "symbol" ? key : String(key);
	}
	function _toPrimitive$1(input, hint) {
	  if (_typeof$2(input) !== "object" || input === null) return input;
	  var prim = input[Symbol.toPrimitive];
	  if (prim !== undefined) {
	    var res = prim.call(input, hint || "default");
	    if (_typeof$2(res) !== "object") return res;
	    throw new TypeError("@@toPrimitive must return a primitive value.");
	  }
	  return (hint === "string" ? String : Number)(input);
	}
	// for environments without Set we fallback to arrays with unique members
	var SetLike = /*#__PURE__*/function () {
	  function SetLike() {
	    var items = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
	    _classCallCheck(this, SetLike);
	    _defineProperty$2(this, "items", void 0);
	    this.items = items;
	  }
	  _createClass(SetLike, [{
	    key: "add",
	    value: function add(value) {
	      if (this.has(value) === false) {
	        this.items.push(value);
	      }
	      return this;
	    }
	  }, {
	    key: "clear",
	    value: function clear() {
	      this.items = [];
	    }
	  }, {
	    key: "delete",
	    value: function _delete(value) {
	      var previousLength = this.items.length;
	      this.items = this.items.filter(function (item) {
	        return item !== value;
	      });
	      return previousLength !== this.items.length;
	    }
	  }, {
	    key: "forEach",
	    value: function forEach(callbackfn) {
	      var _this = this;
	      this.items.forEach(function (item) {
	        callbackfn(item, item, _this);
	      });
	    }
	  }, {
	    key: "has",
	    value: function has(value) {
	      return this.items.indexOf(value) !== -1;
	    }
	  }, {
	    key: "size",
	    get: function get() {
	      return this.items.length;
	    }
	  }]);
	  return SetLike;
	}();
	var SetLike$1 = typeof Set === "undefined" ? Set : SetLike;

	// https://w3c.github.io/html-aria/#document-conformance-requirements-for-use-of-aria-attributes-in-html

	/**
	 * Safe Element.localName for all supported environments
	 * @param element
	 */
	function getLocalName(element) {
	  var _element$localName;
	  return (
	    // eslint-disable-next-line no-restricted-properties -- actual guard for environments without localName
	    (_element$localName = element.localName) !== null && _element$localName !== void 0 ? _element$localName :
	    // eslint-disable-next-line no-restricted-properties -- required for the fallback
	    element.tagName.toLowerCase()
	  );
	}
	var localNameToRoleMappings = {
	  article: "article",
	  aside: "complementary",
	  button: "button",
	  datalist: "listbox",
	  dd: "definition",
	  details: "group",
	  dialog: "dialog",
	  dt: "term",
	  fieldset: "group",
	  figure: "figure",
	  // WARNING: Only with an accessible name
	  form: "form",
	  footer: "contentinfo",
	  h1: "heading",
	  h2: "heading",
	  h3: "heading",
	  h4: "heading",
	  h5: "heading",
	  h6: "heading",
	  header: "banner",
	  hr: "separator",
	  html: "document",
	  legend: "legend",
	  li: "listitem",
	  math: "math",
	  main: "main",
	  menu: "list",
	  nav: "navigation",
	  ol: "list",
	  optgroup: "group",
	  // WARNING: Only in certain context
	  option: "option",
	  output: "status",
	  progress: "progressbar",
	  // WARNING: Only with an accessible name
	  section: "region",
	  summary: "button",
	  table: "table",
	  tbody: "rowgroup",
	  textarea: "textbox",
	  tfoot: "rowgroup",
	  // WARNING: Only in certain context
	  td: "cell",
	  th: "columnheader",
	  thead: "rowgroup",
	  tr: "row",
	  ul: "list"
	};
	var prohibitedAttributes = {
	  caption: new Set(["aria-label", "aria-labelledby"]),
	  code: new Set(["aria-label", "aria-labelledby"]),
	  deletion: new Set(["aria-label", "aria-labelledby"]),
	  emphasis: new Set(["aria-label", "aria-labelledby"]),
	  generic: new Set(["aria-label", "aria-labelledby", "aria-roledescription"]),
	  insertion: new Set(["aria-label", "aria-labelledby"]),
	  paragraph: new Set(["aria-label", "aria-labelledby"]),
	  presentation: new Set(["aria-label", "aria-labelledby"]),
	  strong: new Set(["aria-label", "aria-labelledby"]),
	  subscript: new Set(["aria-label", "aria-labelledby"]),
	  superscript: new Set(["aria-label", "aria-labelledby"])
	};

	/**
	 *
	 * @param element
	 * @param role The role used for this element. This is specified to control whether you want to use the implicit or explicit role.
	 */
	function hasGlobalAriaAttributes(element, role) {
	  // https://rawgit.com/w3c/aria/stable/#global_states
	  // commented attributes are deprecated
	  return ["aria-atomic", "aria-busy", "aria-controls", "aria-current", "aria-describedby", "aria-details",
	  // "disabled",
	  "aria-dropeffect",
	  // "errormessage",
	  "aria-flowto", "aria-grabbed",
	  // "haspopup",
	  "aria-hidden",
	  // "invalid",
	  "aria-keyshortcuts", "aria-label", "aria-labelledby", "aria-live", "aria-owns", "aria-relevant", "aria-roledescription"].some(function (attributeName) {
	    var _prohibitedAttributes;
	    return element.hasAttribute(attributeName) && !((_prohibitedAttributes = prohibitedAttributes[role]) !== null && _prohibitedAttributes !== void 0 && _prohibitedAttributes.has(attributeName));
	  });
	}
	function ignorePresentationalRole(element, implicitRole) {
	  // https://rawgit.com/w3c/aria/stable/#conflict_resolution_presentation_none
	  return hasGlobalAriaAttributes(element, implicitRole);
	}
	function getRole(element) {
	  var explicitRole = getExplicitRole(element);
	  if (explicitRole === null || explicitRole === "presentation") {
	    var implicitRole = getImplicitRole(element);
	    if (explicitRole !== "presentation" || ignorePresentationalRole(element, implicitRole || "")) {
	      return implicitRole;
	    }
	  }
	  return explicitRole;
	}
	function getImplicitRole(element) {
	  var mappedByTag = localNameToRoleMappings[getLocalName(element)];
	  if (mappedByTag !== undefined) {
	    return mappedByTag;
	  }
	  switch (getLocalName(element)) {
	    case "a":
	    case "area":
	    case "link":
	      if (element.hasAttribute("href")) {
	        return "link";
	      }
	      break;
	    case "img":
	      if (element.getAttribute("alt") === "" && !ignorePresentationalRole(element, "img")) {
	        return "presentation";
	      }
	      return "img";
	    case "input":
	      {
	        var _ref = element,
	          type = _ref.type;
	        switch (type) {
	          case "button":
	          case "image":
	          case "reset":
	          case "submit":
	            return "button";
	          case "checkbox":
	          case "radio":
	            return type;
	          case "range":
	            return "slider";
	          case "email":
	          case "tel":
	          case "text":
	          case "url":
	            if (element.hasAttribute("list")) {
	              return "combobox";
	            }
	            return "textbox";
	          case "search":
	            if (element.hasAttribute("list")) {
	              return "combobox";
	            }
	            return "searchbox";
	          case "number":
	            return "spinbutton";
	          default:
	            return null;
	        }
	      }
	    case "select":
	      if (element.hasAttribute("multiple") || element.size > 1) {
	        return "listbox";
	      }
	      return "combobox";
	  }
	  return null;
	}
	function getExplicitRole(element) {
	  var role = element.getAttribute("role");
	  if (role !== null) {
	    var explicitRole = role.trim().split(" ")[0];
	    // String.prototype.split(sep, limit) will always return an array with at least one member
	    // as long as limit is either undefined or > 0
	    if (explicitRole.length > 0) {
	      return explicitRole;
	    }
	  }
	  return null;
	}

	function isElement$1(node) {
	  return node !== null && node.nodeType === node.ELEMENT_NODE;
	}
	function isHTMLTableCaptionElement(node) {
	  return isElement$1(node) && getLocalName(node) === "caption";
	}
	function isHTMLInputElement(node) {
	  return isElement$1(node) && getLocalName(node) === "input";
	}
	function isHTMLOptGroupElement(node) {
	  return isElement$1(node) && getLocalName(node) === "optgroup";
	}
	function isHTMLSelectElement(node) {
	  return isElement$1(node) && getLocalName(node) === "select";
	}
	function isHTMLTableElement(node) {
	  return isElement$1(node) && getLocalName(node) === "table";
	}
	function isHTMLTextAreaElement(node) {
	  return isElement$1(node) && getLocalName(node) === "textarea";
	}
	function safeWindow(node) {
	  var _ref = node.ownerDocument === null ? node : node.ownerDocument,
	    defaultView = _ref.defaultView;
	  if (defaultView === null) {
	    throw new TypeError("no window available");
	  }
	  return defaultView;
	}
	function isHTMLFieldSetElement(node) {
	  return isElement$1(node) && getLocalName(node) === "fieldset";
	}
	function isHTMLLegendElement(node) {
	  return isElement$1(node) && getLocalName(node) === "legend";
	}
	function isHTMLSlotElement(node) {
	  return isElement$1(node) && getLocalName(node) === "slot";
	}
	function isSVGElement(node) {
	  return isElement$1(node) && node.ownerSVGElement !== undefined;
	}
	function isSVGSVGElement(node) {
	  return isElement$1(node) && getLocalName(node) === "svg";
	}
	function isSVGTitleElement(node) {
	  return isSVGElement(node) && getLocalName(node) === "title";
	}

	/**
	 *
	 * @param {Node} node -
	 * @param {string} attributeName -
	 * @returns {Element[]} -
	 */
	function queryIdRefs(node, attributeName) {
	  if (isElement$1(node) && node.hasAttribute(attributeName)) {
	    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion -- safe due to hasAttribute check
	    var ids = node.getAttribute(attributeName).split(" ");

	    // Browsers that don't support shadow DOM won't have getRootNode
	    var root = node.getRootNode ? node.getRootNode() : node.ownerDocument;
	    return ids.map(function (id) {
	      return root.getElementById(id);
	    }).filter(function (element) {
	      return element !== null;
	    }
	    // TODO: why does this not narrow?
	    );
	  }

	  return [];
	}
	function hasAnyConcreteRoles(node, roles) {
	  if (isElement$1(node)) {
	    return roles.indexOf(getRole(node)) !== -1;
	  }
	  return false;
	}

	/**
	 * implements https://w3c.github.io/accname/
	 */

	/**
	 *  A string of characters where all carriage returns, newlines, tabs, and form-feeds are replaced with a single space, and multiple spaces are reduced to a single space. The string contains only character data; it does not contain any markup.
	 */

	/**
	 *
	 * @param {string} string -
	 * @returns {FlatString} -
	 */
	function asFlatString(s) {
	  return s.trim().replace(/\s\s+/g, " ");
	}

	/**
	 *
	 * @param node -
	 * @param options - These are not optional to prevent accidentally calling it without options in `computeAccessibleName`
	 * @returns {boolean} -
	 */
	function isHidden(node, getComputedStyleImplementation) {
	  if (!isElement$1(node)) {
	    return false;
	  }
	  if (node.hasAttribute("hidden") || node.getAttribute("aria-hidden") === "true") {
	    return true;
	  }
	  var style = getComputedStyleImplementation(node);
	  return style.getPropertyValue("display") === "none" || style.getPropertyValue("visibility") === "hidden";
	}

	/**
	 * @param {Node} node -
	 * @returns {boolean} - As defined in step 2E of https://w3c.github.io/accname/#mapping_additional_nd_te
	 */
	function isControl(node) {
	  return hasAnyConcreteRoles(node, ["button", "combobox", "listbox", "textbox"]) || hasAbstractRole(node, "range");
	}
	function hasAbstractRole(node, role) {
	  if (!isElement$1(node)) {
	    return false;
	  }
	  switch (role) {
	    case "range":
	      return hasAnyConcreteRoles(node, ["meter", "progressbar", "scrollbar", "slider", "spinbutton"]);
	    default:
	      throw new TypeError("No knowledge about abstract role '".concat(role, "'. This is likely a bug :("));
	  }
	}

	/**
	 * element.querySelectorAll but also considers owned tree
	 * @param element
	 * @param selectors
	 */
	function querySelectorAllSubtree(element, selectors) {
	  var elements = arrayFrom(element.querySelectorAll(selectors));
	  queryIdRefs(element, "aria-owns").forEach(function (root) {
	    // babel transpiles this assuming an iterator
	    elements.push.apply(elements, arrayFrom(root.querySelectorAll(selectors)));
	  });
	  return elements;
	}
	function querySelectedOptions(listbox) {
	  if (isHTMLSelectElement(listbox)) {
	    // IE11 polyfill
	    return listbox.selectedOptions || querySelectorAllSubtree(listbox, "[selected]");
	  }
	  return querySelectorAllSubtree(listbox, '[aria-selected="true"]');
	}
	function isMarkedPresentational(node) {
	  return hasAnyConcreteRoles(node, ["none", "presentation"]);
	}

	/**
	 * Elements specifically listed in html-aam
	 *
	 * We don't need this for `label` or `legend` elements.
	 * Their implicit roles already allow "naming from content".
	 *
	 * sources:
	 *
	 * - https://w3c.github.io/html-aam/#table-element
	 */
	function isNativeHostLanguageTextAlternativeElement(node) {
	  return isHTMLTableCaptionElement(node);
	}

	/**
	 * https://w3c.github.io/aria/#namefromcontent
	 */
	function allowsNameFromContent(node) {
	  return hasAnyConcreteRoles(node, ["button", "cell", "checkbox", "columnheader", "gridcell", "heading", "label", "legend", "link", "menuitem", "menuitemcheckbox", "menuitemradio", "option", "radio", "row", "rowheader", "switch", "tab", "tooltip", "treeitem"]);
	}

	/**
	 * TODO https://github.com/eps1lon/dom-accessibility-api/issues/100
	 */
	function isDescendantOfNativeHostLanguageTextAlternativeElement(
	// eslint-disable-next-line @typescript-eslint/no-unused-vars -- not implemented yet
	node) {
	  return false;
	}
	function getValueOfTextbox(element) {
	  if (isHTMLInputElement(element) || isHTMLTextAreaElement(element)) {
	    return element.value;
	  }
	  // https://github.com/eps1lon/dom-accessibility-api/issues/4
	  return element.textContent || "";
	}
	function getTextualContent(declaration) {
	  var content = declaration.getPropertyValue("content");
	  if (/^["'].*["']$/.test(content)) {
	    return content.slice(1, -1);
	  }
	  return "";
	}

	/**
	 * https://html.spec.whatwg.org/multipage/forms.html#category-label
	 * TODO: form-associated custom elements
	 * @param element
	 */
	function isLabelableElement(element) {
	  var localName = getLocalName(element);
	  return localName === "button" || localName === "input" && element.getAttribute("type") !== "hidden" || localName === "meter" || localName === "output" || localName === "progress" || localName === "select" || localName === "textarea";
	}

	/**
	 * > [...], then the first such descendant in tree order is the label element's labeled control.
	 * -- https://html.spec.whatwg.org/multipage/forms.html#labeled-control
	 * @param element
	 */
	function findLabelableElement(element) {
	  if (isLabelableElement(element)) {
	    return element;
	  }
	  var labelableElement = null;
	  element.childNodes.forEach(function (childNode) {
	    if (labelableElement === null && isElement$1(childNode)) {
	      var descendantLabelableElement = findLabelableElement(childNode);
	      if (descendantLabelableElement !== null) {
	        labelableElement = descendantLabelableElement;
	      }
	    }
	  });
	  return labelableElement;
	}

	/**
	 * Polyfill of HTMLLabelElement.control
	 * https://html.spec.whatwg.org/multipage/forms.html#labeled-control
	 * @param label
	 */
	function getControlOfLabel(label) {
	  if (label.control !== undefined) {
	    return label.control;
	  }
	  var htmlFor = label.getAttribute("for");
	  if (htmlFor !== null) {
	    return label.ownerDocument.getElementById(htmlFor);
	  }
	  return findLabelableElement(label);
	}

	/**
	 * Polyfill of HTMLInputElement.labels
	 * https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement/labels
	 * @param element
	 */
	function getLabels(element) {
	  var labelsProperty = element.labels;
	  if (labelsProperty === null) {
	    return labelsProperty;
	  }
	  if (labelsProperty !== undefined) {
	    return arrayFrom(labelsProperty);
	  }

	  // polyfill
	  if (!isLabelableElement(element)) {
	    return null;
	  }
	  var document = element.ownerDocument;
	  return arrayFrom(document.querySelectorAll("label")).filter(function (label) {
	    return getControlOfLabel(label) === element;
	  });
	}

	/**
	 * Gets the contents of a slot used for computing the accname
	 * @param slot
	 */
	function getSlotContents(slot) {
	  // Computing the accessible name for elements containing slots is not
	  // currently defined in the spec. This implementation reflects the
	  // behavior of NVDA 2020.2/Firefox 81 and iOS VoiceOver/Safari 13.6.
	  var assignedNodes = slot.assignedNodes();
	  if (assignedNodes.length === 0) {
	    // if no nodes are assigned to the slot, it displays the default content
	    return arrayFrom(slot.childNodes);
	  }
	  return assignedNodes;
	}

	/**
	 * implements https://w3c.github.io/accname/#mapping_additional_nd_te
	 * @param root
	 * @param options
	 * @returns
	 */
	function computeTextAlternative(root) {
	  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
	  var consultedNodes = new SetLike$1();
	  var window = safeWindow(root);
	  var _options$compute = options.compute,
	    compute = _options$compute === void 0 ? "name" : _options$compute,
	    _options$computedStyl = options.computedStyleSupportsPseudoElements,
	    computedStyleSupportsPseudoElements = _options$computedStyl === void 0 ? options.getComputedStyle !== undefined : _options$computedStyl,
	    _options$getComputedS = options.getComputedStyle,
	    getComputedStyle = _options$getComputedS === void 0 ? window.getComputedStyle.bind(window) : _options$getComputedS,
	    _options$hidden = options.hidden,
	    hidden = _options$hidden === void 0 ? false : _options$hidden;

	  // 2F.i
	  function computeMiscTextAlternative(node, context) {
	    var accumulatedText = "";
	    if (isElement$1(node) && computedStyleSupportsPseudoElements) {
	      var pseudoBefore = getComputedStyle(node, "::before");
	      var beforeContent = getTextualContent(pseudoBefore);
	      accumulatedText = "".concat(beforeContent, " ").concat(accumulatedText);
	    }

	    // FIXME: Including aria-owns is not defined in the spec
	    // But it is required in the web-platform-test
	    var childNodes = isHTMLSlotElement(node) ? getSlotContents(node) : arrayFrom(node.childNodes).concat(queryIdRefs(node, "aria-owns"));
	    childNodes.forEach(function (child) {
	      var result = computeTextAlternative(child, {
	        isEmbeddedInLabel: context.isEmbeddedInLabel,
	        isReferenced: false,
	        recursion: true
	      });
	      // TODO: Unclear why display affects delimiter
	      // see https://github.com/w3c/accname/issues/3
	      var display = isElement$1(child) ? getComputedStyle(child).getPropertyValue("display") : "inline";
	      var separator = display !== "inline" ? " " : "";
	      // trailing separator for wpt tests
	      accumulatedText += "".concat(separator).concat(result).concat(separator);
	    });
	    if (isElement$1(node) && computedStyleSupportsPseudoElements) {
	      var pseudoAfter = getComputedStyle(node, "::after");
	      var afterContent = getTextualContent(pseudoAfter);
	      accumulatedText = "".concat(accumulatedText, " ").concat(afterContent);
	    }
	    return accumulatedText.trim();
	  }

	  /**
	   *
	   * @param element
	   * @param attributeName
	   * @returns A string non-empty string or `null`
	   */
	  function useAttribute(element, attributeName) {
	    var attribute = element.getAttributeNode(attributeName);
	    if (attribute !== null && !consultedNodes.has(attribute) && attribute.value.trim() !== "") {
	      consultedNodes.add(attribute);
	      return attribute.value;
	    }
	    return null;
	  }
	  function computeTooltipAttributeValue(node) {
	    if (!isElement$1(node)) {
	      return null;
	    }
	    return useAttribute(node, "title");
	  }
	  function computeElementTextAlternative(node) {
	    if (!isElement$1(node)) {
	      return null;
	    }

	    // https://w3c.github.io/html-aam/#fieldset-and-legend-elements
	    if (isHTMLFieldSetElement(node)) {
	      consultedNodes.add(node);
	      var children = arrayFrom(node.childNodes);
	      for (var i = 0; i < children.length; i += 1) {
	        var child = children[i];
	        if (isHTMLLegendElement(child)) {
	          return computeTextAlternative(child, {
	            isEmbeddedInLabel: false,
	            isReferenced: false,
	            recursion: false
	          });
	        }
	      }
	    } else if (isHTMLTableElement(node)) {
	      // https://w3c.github.io/html-aam/#table-element
	      consultedNodes.add(node);
	      var _children = arrayFrom(node.childNodes);
	      for (var _i = 0; _i < _children.length; _i += 1) {
	        var _child = _children[_i];
	        if (isHTMLTableCaptionElement(_child)) {
	          return computeTextAlternative(_child, {
	            isEmbeddedInLabel: false,
	            isReferenced: false,
	            recursion: false
	          });
	        }
	      }
	    } else if (isSVGSVGElement(node)) {
	      // https://www.w3.org/TR/svg-aam-1.0/
	      consultedNodes.add(node);
	      var _children2 = arrayFrom(node.childNodes);
	      for (var _i2 = 0; _i2 < _children2.length; _i2 += 1) {
	        var _child2 = _children2[_i2];
	        if (isSVGTitleElement(_child2)) {
	          return _child2.textContent;
	        }
	      }
	      return null;
	    } else if (getLocalName(node) === "img" || getLocalName(node) === "area") {
	      // https://w3c.github.io/html-aam/#area-element
	      // https://w3c.github.io/html-aam/#img-element
	      var nameFromAlt = useAttribute(node, "alt");
	      if (nameFromAlt !== null) {
	        return nameFromAlt;
	      }
	    } else if (isHTMLOptGroupElement(node)) {
	      var nameFromLabel = useAttribute(node, "label");
	      if (nameFromLabel !== null) {
	        return nameFromLabel;
	      }
	    }
	    if (isHTMLInputElement(node) && (node.type === "button" || node.type === "submit" || node.type === "reset")) {
	      // https://w3c.github.io/html-aam/#input-type-text-input-type-password-input-type-search-input-type-tel-input-type-email-input-type-url-and-textarea-element-accessible-description-computation
	      var nameFromValue = useAttribute(node, "value");
	      if (nameFromValue !== null) {
	        return nameFromValue;
	      }

	      // TODO: l10n
	      if (node.type === "submit") {
	        return "Submit";
	      }
	      // TODO: l10n
	      if (node.type === "reset") {
	        return "Reset";
	      }
	    }
	    var labels = getLabels(node);
	    if (labels !== null && labels.length !== 0) {
	      consultedNodes.add(node);
	      return arrayFrom(labels).map(function (element) {
	        return computeTextAlternative(element, {
	          isEmbeddedInLabel: true,
	          isReferenced: false,
	          recursion: true
	        });
	      }).filter(function (label) {
	        return label.length > 0;
	      }).join(" ");
	    }

	    // https://w3c.github.io/html-aam/#input-type-image-accessible-name-computation
	    // TODO: wpt test consider label elements but html-aam does not mention them
	    // We follow existing implementations over spec
	    if (isHTMLInputElement(node) && node.type === "image") {
	      var _nameFromAlt = useAttribute(node, "alt");
	      if (_nameFromAlt !== null) {
	        return _nameFromAlt;
	      }
	      var nameFromTitle = useAttribute(node, "title");
	      if (nameFromTitle !== null) {
	        return nameFromTitle;
	      }

	      // TODO: l10n
	      return "Submit Query";
	    }
	    if (hasAnyConcreteRoles(node, ["button"])) {
	      // https://www.w3.org/TR/html-aam-1.0/#button-element
	      var nameFromSubTree = computeMiscTextAlternative(node, {
	        isEmbeddedInLabel: false,
	        isReferenced: false
	      });
	      if (nameFromSubTree !== "") {
	        return nameFromSubTree;
	      }
	    }
	    return null;
	  }
	  function computeTextAlternative(current, context) {
	    if (consultedNodes.has(current)) {
	      return "";
	    }

	    // 2A
	    if (!hidden && isHidden(current, getComputedStyle) && !context.isReferenced) {
	      consultedNodes.add(current);
	      return "";
	    }

	    // 2B
	    var labelElements = queryIdRefs(current, "aria-labelledby");
	    if (compute === "name" && !context.isReferenced && labelElements.length > 0) {
	      return labelElements.map(function (element) {
	        return computeTextAlternative(element, {
	          isEmbeddedInLabel: context.isEmbeddedInLabel,
	          isReferenced: true,
	          // thais isn't recursion as specified, otherwise we would skip
	          // `aria-label` in
	          // <input id="myself" aria-label="foo" aria-labelledby="myself"
	          recursion: false
	        });
	      }).join(" ");
	    }

	    // 2C
	    // Changed from the spec in anticipation of https://github.com/w3c/accname/issues/64
	    // spec says we should only consider skipping if we have a non-empty label
	    var skipToStep2E = context.recursion && isControl(current) && compute === "name";
	    if (!skipToStep2E) {
	      var ariaLabel = (isElement$1(current) && current.getAttribute("aria-label") || "").trim();
	      if (ariaLabel !== "" && compute === "name") {
	        consultedNodes.add(current);
	        return ariaLabel;
	      }

	      // 2D
	      if (!isMarkedPresentational(current)) {
	        var elementTextAlternative = computeElementTextAlternative(current);
	        if (elementTextAlternative !== null) {
	          consultedNodes.add(current);
	          return elementTextAlternative;
	        }
	      }
	    }

	    // special casing, cheating to make tests pass
	    // https://github.com/w3c/accname/issues/67
	    if (hasAnyConcreteRoles(current, ["menu"])) {
	      consultedNodes.add(current);
	      return "";
	    }

	    // 2E
	    if (skipToStep2E || context.isEmbeddedInLabel || context.isReferenced) {
	      if (hasAnyConcreteRoles(current, ["combobox", "listbox"])) {
	        consultedNodes.add(current);
	        var selectedOptions = querySelectedOptions(current);
	        if (selectedOptions.length === 0) {
	          // defined per test `name_heading_combobox`
	          return isHTMLInputElement(current) ? current.value : "";
	        }
	        return arrayFrom(selectedOptions).map(function (selectedOption) {
	          return computeTextAlternative(selectedOption, {
	            isEmbeddedInLabel: context.isEmbeddedInLabel,
	            isReferenced: false,
	            recursion: true
	          });
	        }).join(" ");
	      }
	      if (hasAbstractRole(current, "range")) {
	        consultedNodes.add(current);
	        if (current.hasAttribute("aria-valuetext")) {
	          // eslint-disable-next-line @typescript-eslint/no-non-null-assertion -- safe due to hasAttribute guard
	          return current.getAttribute("aria-valuetext");
	        }
	        if (current.hasAttribute("aria-valuenow")) {
	          // eslint-disable-next-line @typescript-eslint/no-non-null-assertion -- safe due to hasAttribute guard
	          return current.getAttribute("aria-valuenow");
	        }
	        // Otherwise, use the value as specified by a host language attribute.
	        return current.getAttribute("value") || "";
	      }
	      if (hasAnyConcreteRoles(current, ["textbox"])) {
	        consultedNodes.add(current);
	        return getValueOfTextbox(current);
	      }
	    }

	    // 2F: https://w3c.github.io/accname/#step2F
	    if (allowsNameFromContent(current) || isElement$1(current) && context.isReferenced || isNativeHostLanguageTextAlternativeElement(current) || isDescendantOfNativeHostLanguageTextAlternativeElement()) {
	      var accumulatedText2F = computeMiscTextAlternative(current, {
	        isEmbeddedInLabel: context.isEmbeddedInLabel,
	        isReferenced: false
	      });
	      if (accumulatedText2F !== "") {
	        consultedNodes.add(current);
	        return accumulatedText2F;
	      }
	    }
	    if (current.nodeType === current.TEXT_NODE) {
	      consultedNodes.add(current);
	      return current.textContent || "";
	    }
	    if (context.recursion) {
	      consultedNodes.add(current);
	      return computeMiscTextAlternative(current, {
	        isEmbeddedInLabel: context.isEmbeddedInLabel,
	        isReferenced: false
	      });
	    }
	    var tooltipAttributeValue = computeTooltipAttributeValue(current);
	    if (tooltipAttributeValue !== null) {
	      consultedNodes.add(current);
	      return tooltipAttributeValue;
	    }

	    // TODO should this be reachable?
	    consultedNodes.add(current);
	    return "";
	  }
	  return asFlatString(computeTextAlternative(root, {
	    isEmbeddedInLabel: false,
	    // by spec computeAccessibleDescription starts with the referenced elements as roots
	    isReferenced: compute === "description",
	    recursion: false
	  }));
	}

	function _typeof$1(obj) {
	  "@babel/helpers - typeof";

	  return _typeof$1 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {
	    return typeof obj;
	  } : function (obj) {
	    return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
	  }, _typeof$1(obj);
	}
	function ownKeys(object, enumerableOnly) {
	  var keys = Object.keys(object);
	  if (Object.getOwnPropertySymbols) {
	    var symbols = Object.getOwnPropertySymbols(object);
	    enumerableOnly && (symbols = symbols.filter(function (sym) {
	      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
	    })), keys.push.apply(keys, symbols);
	  }
	  return keys;
	}
	function _objectSpread(target) {
	  for (var i = 1; i < arguments.length; i++) {
	    var source = null != arguments[i] ? arguments[i] : {};
	    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {
	      _defineProperty$1(target, key, source[key]);
	    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {
	      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
	    });
	  }
	  return target;
	}
	function _defineProperty$1(obj, key, value) {
	  key = _toPropertyKey(key);
	  if (key in obj) {
	    Object.defineProperty(obj, key, {
	      value: value,
	      enumerable: true,
	      configurable: true,
	      writable: true
	    });
	  } else {
	    obj[key] = value;
	  }
	  return obj;
	}
	function _toPropertyKey(arg) {
	  var key = _toPrimitive(arg, "string");
	  return _typeof$1(key) === "symbol" ? key : String(key);
	}
	function _toPrimitive(input, hint) {
	  if (_typeof$1(input) !== "object" || input === null) return input;
	  var prim = input[Symbol.toPrimitive];
	  if (prim !== undefined) {
	    var res = prim.call(input, hint || "default");
	    if (_typeof$1(res) !== "object") return res;
	    throw new TypeError("@@toPrimitive must return a primitive value.");
	  }
	  return (hint === "string" ? String : Number)(input);
	}

	/**
	 * @param root
	 * @param options
	 * @returns
	 */
	function computeAccessibleDescription(root) {
	  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
	  var description = queryIdRefs(root, "aria-describedby").map(function (element) {
	    return computeTextAlternative(element, _objectSpread(_objectSpread({}, options), {}, {
	      compute: "description"
	    }));
	  }).join(" ");

	  // TODO: Technically we need to make sure that node wasn't used for the accessible name
	  //       This causes `description_1.0_combobox-focusable-manual` to fail
	  //
	  // https://www.w3.org/TR/html-aam-1.0/#accessible-name-and-description-computation
	  // says for so many elements to use the `title` that we assume all elements are considered
	  if (description === "") {
	    var title = root.getAttribute("title");
	    description = title === null ? "" : title;
	  }
	  return description;
	}

	/**
	 * https://w3c.github.io/aria/#namefromprohibited
	 */
	function prohibitsNaming(node) {
	  return hasAnyConcreteRoles(node, ["caption", "code", "deletion", "emphasis", "generic", "insertion", "paragraph", "presentation", "strong", "subscript", "superscript"]);
	}

	/**
	 * implements https://w3c.github.io/accname/#mapping_additional_nd_name
	 * @param root
	 * @param options
	 * @returns
	 */
	function computeAccessibleName(root) {
	  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
	  if (prohibitsNaming(root)) {
	    return "";
	  }
	  return computeTextAlternative(root, options);
	}

	var lib = {};

	var ariaPropsMap$1 = {};

	var iterationDecorator$1 = {};

	var iteratorProxy$1 = {};

	Object.defineProperty(iteratorProxy$1, "__esModule", {
	  value: true
	});
	iteratorProxy$1.default = void 0;

	// eslint-disable-next-line no-unused-vars
	function iteratorProxy() {
	  var values = this;
	  var index = 0;
	  var iter = {
	    '@@iterator': function iterator() {
	      return iter;
	    },
	    next: function next() {
	      if (index < values.length) {
	        var value = values[index];
	        index = index + 1;
	        return {
	          done: false,
	          value: value
	        };
	      } else {
	        return {
	          done: true
	        };
	      }
	    }
	  };
	  return iter;
	}
	var _default$2h = iteratorProxy;
	iteratorProxy$1.default = _default$2h;

	Object.defineProperty(iterationDecorator$1, "__esModule", {
	  value: true
	});
	iterationDecorator$1.default = iterationDecorator;
	var _iteratorProxy = _interopRequireDefault$a(iteratorProxy$1);
	function _interopRequireDefault$a(obj) {
	  return obj && obj.__esModule ? obj : {
	    default: obj
	  };
	}
	function _typeof(obj) {
	  "@babel/helpers - typeof";

	  return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {
	    return typeof obj;
	  } : function (obj) {
	    return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
	  }, _typeof(obj);
	}
	function iterationDecorator(collection, entries) {
	  if (typeof Symbol === 'function' && _typeof(Symbol.iterator) === 'symbol') {
	    Object.defineProperty(collection, Symbol.iterator, {
	      value: _iteratorProxy.default.bind(entries)
	    });
	  }
	  return collection;
	}

	Object.defineProperty(ariaPropsMap$1, "__esModule", {
	  value: true
	});
	ariaPropsMap$1.default = void 0;
	var _iterationDecorator$4 = _interopRequireDefault$9(iterationDecorator$1);
	function _interopRequireDefault$9(obj) {
	  return obj && obj.__esModule ? obj : {
	    default: obj
	  };
	}
	function _slicedToArray$4(arr, i) {
	  return _arrayWithHoles$4(arr) || _iterableToArrayLimit$4(arr, i) || _unsupportedIterableToArray$4(arr, i) || _nonIterableRest$4();
	}
	function _nonIterableRest$4() {
	  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
	}
	function _iterableToArrayLimit$4(arr, i) {
	  var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
	  if (_i == null) return;
	  var _arr = [];
	  var _n = true;
	  var _d = false;
	  var _s, _e;
	  try {
	    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
	      _arr.push(_s.value);
	      if (i && _arr.length === i) break;
	    }
	  } catch (err) {
	    _d = true;
	    _e = err;
	  } finally {
	    try {
	      if (!_n && _i["return"] != null) _i["return"]();
	    } finally {
	      if (_d) throw _e;
	    }
	  }
	  return _arr;
	}
	function _arrayWithHoles$4(arr) {
	  if (Array.isArray(arr)) return arr;
	}
	function _createForOfIteratorHelper$4(o, allowArrayLike) {
	  var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
	  if (!it) {
	    if (Array.isArray(o) || (it = _unsupportedIterableToArray$4(o)) || allowArrayLike && o && typeof o.length === "number") {
	      if (it) o = it;
	      var i = 0;
	      var F = function F() {};
	      return {
	        s: F,
	        n: function n() {
	          if (i >= o.length) return {
	            done: true
	          };
	          return {
	            done: false,
	            value: o[i++]
	          };
	        },
	        e: function e(_e2) {
	          throw _e2;
	        },
	        f: F
	      };
	    }
	    throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
	  }
	  var normalCompletion = true,
	    didErr = false,
	    err;
	  return {
	    s: function s() {
	      it = it.call(o);
	    },
	    n: function n() {
	      var step = it.next();
	      normalCompletion = step.done;
	      return step;
	    },
	    e: function e(_e3) {
	      didErr = true;
	      err = _e3;
	    },
	    f: function f() {
	      try {
	        if (!normalCompletion && it.return != null) it.return();
	      } finally {
	        if (didErr) throw err;
	      }
	    }
	  };
	}
	function _unsupportedIterableToArray$4(o, minLen) {
	  if (!o) return;
	  if (typeof o === "string") return _arrayLikeToArray$4(o, minLen);
	  var n = Object.prototype.toString.call(o).slice(8, -1);
	  if (n === "Object" && o.constructor) n = o.constructor.name;
	  if (n === "Map" || n === "Set") return Array.from(o);
	  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray$4(o, minLen);
	}
	function _arrayLikeToArray$4(arr, len) {
	  if (len == null || len > arr.length) len = arr.length;
	  for (var i = 0, arr2 = new Array(len); i < len; i++) {
	    arr2[i] = arr[i];
	  }
	  return arr2;
	}
	var properties = [['aria-activedescendant', {
	  'type': 'id'
	}], ['aria-atomic', {
	  'type': 'boolean'
	}], ['aria-autocomplete', {
	  'type': 'token',
	  'values': ['inline', 'list', 'both', 'none']
	}], ['aria-busy', {
	  'type': 'boolean'
	}], ['aria-checked', {
	  'type': 'tristate'
	}], ['aria-colcount', {
	  type: 'integer'
	}], ['aria-colindex', {
	  type: 'integer'
	}], ['aria-colspan', {
	  type: 'integer'
	}], ['aria-controls', {
	  'type': 'idlist'
	}], ['aria-current', {
	  type: 'token',
	  values: ['page', 'step', 'location', 'date', 'time', true, false]
	}], ['aria-describedby', {
	  'type': 'idlist'
	}], ['aria-details', {
	  'type': 'id'
	}], ['aria-disabled', {
	  'type': 'boolean'
	}], ['aria-dropeffect', {
	  'type': 'tokenlist',
	  'values': ['copy', 'execute', 'link', 'move', 'none', 'popup']
	}], ['aria-errormessage', {
	  'type': 'id'
	}], ['aria-expanded', {
	  'type': 'boolean',
	  'allowundefined': true
	}], ['aria-flowto', {
	  'type': 'idlist'
	}], ['aria-grabbed', {
	  'type': 'boolean',
	  'allowundefined': true
	}], ['aria-haspopup', {
	  'type': 'token',
	  'values': [false, true, 'menu', 'listbox', 'tree', 'grid', 'dialog']
	}], ['aria-hidden', {
	  'type': 'boolean',
	  'allowundefined': true
	}], ['aria-invalid', {
	  'type': 'token',
	  'values': ['grammar', false, 'spelling', true]
	}], ['aria-keyshortcuts', {
	  type: 'string'
	}], ['aria-label', {
	  'type': 'string'
	}], ['aria-labelledby', {
	  'type': 'idlist'
	}], ['aria-level', {
	  'type': 'integer'
	}], ['aria-live', {
	  'type': 'token',
	  'values': ['assertive', 'off', 'polite']
	}], ['aria-modal', {
	  type: 'boolean'
	}], ['aria-multiline', {
	  'type': 'boolean'
	}], ['aria-multiselectable', {
	  'type': 'boolean'
	}], ['aria-orientation', {
	  'type': 'token',
	  'values': ['vertical', 'undefined', 'horizontal']
	}], ['aria-owns', {
	  'type': 'idlist'
	}], ['aria-placeholder', {
	  type: 'string'
	}], ['aria-posinset', {
	  'type': 'integer'
	}], ['aria-pressed', {
	  'type': 'tristate'
	}], ['aria-readonly', {
	  'type': 'boolean'
	}], ['aria-relevant', {
	  'type': 'tokenlist',
	  'values': ['additions', 'all', 'removals', 'text']
	}], ['aria-required', {
	  'type': 'boolean'
	}], ['aria-roledescription', {
	  type: 'string'
	}], ['aria-rowcount', {
	  type: 'integer'
	}], ['aria-rowindex', {
	  type: 'integer'
	}], ['aria-rowspan', {
	  type: 'integer'
	}], ['aria-selected', {
	  'type': 'boolean',
	  'allowundefined': true
	}], ['aria-setsize', {
	  'type': 'integer'
	}], ['aria-sort', {
	  'type': 'token',
	  'values': ['ascending', 'descending', 'none', 'other']
	}], ['aria-valuemax', {
	  'type': 'number'
	}], ['aria-valuemin', {
	  'type': 'number'
	}], ['aria-valuenow', {
	  'type': 'number'
	}], ['aria-valuetext', {
	  'type': 'string'
	}]];
	var ariaPropsMap = {
	  entries: function entries() {
	    return properties;
	  },
	  forEach: function forEach(fn) {
	    var thisArg = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
	    var _iterator = _createForOfIteratorHelper$4(properties),
	      _step;
	    try {
	      for (_iterator.s(); !(_step = _iterator.n()).done;) {
	        var _step$value = _slicedToArray$4(_step.value, 2),
	          key = _step$value[0],
	          values = _step$value[1];
	        fn.call(thisArg, values, key, properties);
	      }
	    } catch (err) {
	      _iterator.e(err);
	    } finally {
	      _iterator.f();
	    }
	  },
	  get: function get(key) {
	    var item = properties.find(function (tuple) {
	      return tuple[0] === key ? true : false;
	    });
	    return item && item[1];
	  },
	  has: function has(key) {
	    return !!ariaPropsMap.get(key);
	  },
	  keys: function keys() {
	    return properties.map(function (_ref) {
	      var _ref2 = _slicedToArray$4(_ref, 1),
	        key = _ref2[0];
	      return key;
	    });
	  },
	  values: function values() {
	    return properties.map(function (_ref3) {
	      var _ref4 = _slicedToArray$4(_ref3, 2),
	        values = _ref4[1];
	      return values;
	    });
	  }
	};
	var _default$2g = (0, _iterationDecorator$4.default)(ariaPropsMap, ariaPropsMap.entries());
	ariaPropsMap$1.default = _default$2g;

	var domMap$1 = {};

	Object.defineProperty(domMap$1, "__esModule", {
	  value: true
	});
	domMap$1.default = void 0;
	var _iterationDecorator$3 = _interopRequireDefault$8(iterationDecorator$1);
	function _interopRequireDefault$8(obj) {
	  return obj && obj.__esModule ? obj : {
	    default: obj
	  };
	}
	function _slicedToArray$3(arr, i) {
	  return _arrayWithHoles$3(arr) || _iterableToArrayLimit$3(arr, i) || _unsupportedIterableToArray$3(arr, i) || _nonIterableRest$3();
	}
	function _nonIterableRest$3() {
	  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
	}
	function _iterableToArrayLimit$3(arr, i) {
	  var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
	  if (_i == null) return;
	  var _arr = [];
	  var _n = true;
	  var _d = false;
	  var _s, _e;
	  try {
	    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
	      _arr.push(_s.value);
	      if (i && _arr.length === i) break;
	    }
	  } catch (err) {
	    _d = true;
	    _e = err;
	  } finally {
	    try {
	      if (!_n && _i["return"] != null) _i["return"]();
	    } finally {
	      if (_d) throw _e;
	    }
	  }
	  return _arr;
	}
	function _arrayWithHoles$3(arr) {
	  if (Array.isArray(arr)) return arr;
	}
	function _createForOfIteratorHelper$3(o, allowArrayLike) {
	  var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
	  if (!it) {
	    if (Array.isArray(o) || (it = _unsupportedIterableToArray$3(o)) || allowArrayLike && o && typeof o.length === "number") {
	      if (it) o = it;
	      var i = 0;
	      var F = function F() {};
	      return {
	        s: F,
	        n: function n() {
	          if (i >= o.length) return {
	            done: true
	          };
	          return {
	            done: false,
	            value: o[i++]
	          };
	        },
	        e: function e(_e2) {
	          throw _e2;
	        },
	        f: F
	      };
	    }
	    throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
	  }
	  var normalCompletion = true,
	    didErr = false,
	    err;
	  return {
	    s: function s() {
	      it = it.call(o);
	    },
	    n: function n() {
	      var step = it.next();
	      normalCompletion = step.done;
	      return step;
	    },
	    e: function e(_e3) {
	      didErr = true;
	      err = _e3;
	    },
	    f: function f() {
	      try {
	        if (!normalCompletion && it.return != null) it.return();
	      } finally {
	        if (didErr) throw err;
	      }
	    }
	  };
	}
	function _unsupportedIterableToArray$3(o, minLen) {
	  if (!o) return;
	  if (typeof o === "string") return _arrayLikeToArray$3(o, minLen);
	  var n = Object.prototype.toString.call(o).slice(8, -1);
	  if (n === "Object" && o.constructor) n = o.constructor.name;
	  if (n === "Map" || n === "Set") return Array.from(o);
	  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray$3(o, minLen);
	}
	function _arrayLikeToArray$3(arr, len) {
	  if (len == null || len > arr.length) len = arr.length;
	  for (var i = 0, arr2 = new Array(len); i < len; i++) {
	    arr2[i] = arr[i];
	  }
	  return arr2;
	}
	var dom$1 = [['a', {
	  reserved: false
	}], ['abbr', {
	  reserved: false
	}], ['acronym', {
	  reserved: false
	}], ['address', {
	  reserved: false
	}], ['applet', {
	  reserved: false
	}], ['area', {
	  reserved: false
	}], ['article', {
	  reserved: false
	}], ['aside', {
	  reserved: false
	}], ['audio', {
	  reserved: false
	}], ['b', {
	  reserved: false
	}], ['base', {
	  reserved: true
	}], ['bdi', {
	  reserved: false
	}], ['bdo', {
	  reserved: false
	}], ['big', {
	  reserved: false
	}], ['blink', {
	  reserved: false
	}], ['blockquote', {
	  reserved: false
	}], ['body', {
	  reserved: false
	}], ['br', {
	  reserved: false
	}], ['button', {
	  reserved: false
	}], ['canvas', {
	  reserved: false
	}], ['caption', {
	  reserved: false
	}], ['center', {
	  reserved: false
	}], ['cite', {
	  reserved: false
	}], ['code', {
	  reserved: false
	}], ['col', {
	  reserved: true
	}], ['colgroup', {
	  reserved: true
	}], ['content', {
	  reserved: false
	}], ['data', {
	  reserved: false
	}], ['datalist', {
	  reserved: false
	}], ['dd', {
	  reserved: false
	}], ['del', {
	  reserved: false
	}], ['details', {
	  reserved: false
	}], ['dfn', {
	  reserved: false
	}], ['dialog', {
	  reserved: false
	}], ['dir', {
	  reserved: false
	}], ['div', {
	  reserved: false
	}], ['dl', {
	  reserved: false
	}], ['dt', {
	  reserved: false
	}], ['em', {
	  reserved: false
	}], ['embed', {
	  reserved: false
	}], ['fieldset', {
	  reserved: false
	}], ['figcaption', {
	  reserved: false
	}], ['figure', {
	  reserved: false
	}], ['font', {
	  reserved: false
	}], ['footer', {
	  reserved: false
	}], ['form', {
	  reserved: false
	}], ['frame', {
	  reserved: false
	}], ['frameset', {
	  reserved: false
	}], ['h1', {
	  reserved: false
	}], ['h2', {
	  reserved: false
	}], ['h3', {
	  reserved: false
	}], ['h4', {
	  reserved: false
	}], ['h5', {
	  reserved: false
	}], ['h6', {
	  reserved: false
	}], ['head', {
	  reserved: true
	}], ['header', {
	  reserved: false
	}], ['hgroup', {
	  reserved: false
	}], ['hr', {
	  reserved: false
	}], ['html', {
	  reserved: true
	}], ['i', {
	  reserved: false
	}], ['iframe', {
	  reserved: false
	}], ['img', {
	  reserved: false
	}], ['input', {
	  reserved: false
	}], ['ins', {
	  reserved: false
	}], ['kbd', {
	  reserved: false
	}], ['keygen', {
	  reserved: false
	}], ['label', {
	  reserved: false
	}], ['legend', {
	  reserved: false
	}], ['li', {
	  reserved: false
	}], ['link', {
	  reserved: true
	}], ['main', {
	  reserved: false
	}], ['map', {
	  reserved: false
	}], ['mark', {
	  reserved: false
	}], ['marquee', {
	  reserved: false
	}], ['menu', {
	  reserved: false
	}], ['menuitem', {
	  reserved: false
	}], ['meta', {
	  reserved: true
	}], ['meter', {
	  reserved: false
	}], ['nav', {
	  reserved: false
	}], ['noembed', {
	  reserved: true
	}], ['noscript', {
	  reserved: true
	}], ['object', {
	  reserved: false
	}], ['ol', {
	  reserved: false
	}], ['optgroup', {
	  reserved: false
	}], ['option', {
	  reserved: false
	}], ['output', {
	  reserved: false
	}], ['p', {
	  reserved: false
	}], ['param', {
	  reserved: true
	}], ['picture', {
	  reserved: true
	}], ['pre', {
	  reserved: false
	}], ['progress', {
	  reserved: false
	}], ['q', {
	  reserved: false
	}], ['rp', {
	  reserved: false
	}], ['rt', {
	  reserved: false
	}], ['rtc', {
	  reserved: false
	}], ['ruby', {
	  reserved: false
	}], ['s', {
	  reserved: false
	}], ['samp', {
	  reserved: false
	}], ['script', {
	  reserved: true
	}], ['section', {
	  reserved: false
	}], ['select', {
	  reserved: false
	}], ['small', {
	  reserved: false
	}], ['source', {
	  reserved: true
	}], ['spacer', {
	  reserved: false
	}], ['span', {
	  reserved: false
	}], ['strike', {
	  reserved: false
	}], ['strong', {
	  reserved: false
	}], ['style', {
	  reserved: true
	}], ['sub', {
	  reserved: false
	}], ['summary', {
	  reserved: false
	}], ['sup', {
	  reserved: false
	}], ['table', {
	  reserved: false
	}], ['tbody', {
	  reserved: false
	}], ['td', {
	  reserved: false
	}], ['textarea', {
	  reserved: false
	}], ['tfoot', {
	  reserved: false
	}], ['th', {
	  reserved: false
	}], ['thead', {
	  reserved: false
	}], ['time', {
	  reserved: false
	}], ['title', {
	  reserved: true
	}], ['tr', {
	  reserved: false
	}], ['track', {
	  reserved: true
	}], ['tt', {
	  reserved: false
	}], ['u', {
	  reserved: false
	}], ['ul', {
	  reserved: false
	}], ['var', {
	  reserved: false
	}], ['video', {
	  reserved: false
	}], ['wbr', {
	  reserved: false
	}], ['xmp', {
	  reserved: false
	}]];
	var domMap = {
	  entries: function entries() {
	    return dom$1;
	  },
	  forEach: function forEach(fn) {
	    var thisArg = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
	    var _iterator = _createForOfIteratorHelper$3(dom$1),
	      _step;
	    try {
	      for (_iterator.s(); !(_step = _iterator.n()).done;) {
	        var _step$value = _slicedToArray$3(_step.value, 2),
	          key = _step$value[0],
	          values = _step$value[1];
	        fn.call(thisArg, values, key, dom$1);
	      }
	    } catch (err) {
	      _iterator.e(err);
	    } finally {
	      _iterator.f();
	    }
	  },
	  get: function get(key) {
	    var item = dom$1.find(function (tuple) {
	      return tuple[0] === key ? true : false;
	    });
	    return item && item[1];
	  },
	  has: function has(key) {
	    return !!domMap.get(key);
	  },
	  keys: function keys() {
	    return dom$1.map(function (_ref) {
	      var _ref2 = _slicedToArray$3(_ref, 1),
	        key = _ref2[0];
	      return key;
	    });
	  },
	  values: function values() {
	    return dom$1.map(function (_ref3) {
	      var _ref4 = _slicedToArray$3(_ref3, 2),
	        values = _ref4[1];
	      return values;
	    });
	  }
	};
	var _default$2f = (0, _iterationDecorator$3.default)(domMap, domMap.entries());
	domMap$1.default = _default$2f;

	var rolesMap$1 = {};

	var ariaAbstractRoles$1 = {};

	var commandRole$1 = {};

	Object.defineProperty(commandRole$1, "__esModule", {
	  value: true
	});
	commandRole$1.default = void 0;
	var commandRole = {
	  abstract: true,
	  accessibleNameRequired: false,
	  baseConcepts: [],
	  childrenPresentational: false,
	  nameFrom: ['author'],
	  prohibitedProps: [],
	  props: {},
	  relatedConcepts: [{
	    concept: {
	      name: 'menuitem'
	    },
	    module: 'HTML'
	  }],
	  requireContextRole: [],
	  requiredContextRole: [],
	  requiredOwnedElements: [],
	  requiredProps: {},
	  superClass: [['roletype', 'widget']]
	};
	var _default$2e = commandRole;
	commandRole$1.default = _default$2e;

	var compositeRole$1 = {};

	Object.defineProperty(compositeRole$1, "__esModule", {
	  value: true
	});
	compositeRole$1.default = void 0;
	var compositeRole = {
	  abstract: true,
	  accessibleNameRequired: false,
	  baseConcepts: [],
	  childrenPresentational: false,
	  nameFrom: ['author'],
	  prohibitedProps: [],
	  props: {
	    'aria-activedescendant': null,
	    'aria-disabled': null
	  },
	  relatedConcepts: [],
	  requireContextRole: [],
	  requiredContextRole: [],
	  requiredOwnedElements: [],
	  requiredProps: {},
	  superClass: [['roletype', 'widget']]
	};
	var _default$2d = compositeRole;
	compositeRole$1.default = _default$2d;

	var inputRole$1 = {};

	Object.defineProperty(inputRole$1, "__esModule", {
	  value: true
	});
	inputRole$1.default = void 0;
	var inputRole = {
	  abstract: true,
	  accessibleNameRequired: false,
	  baseConcepts: [],
	  childrenPresentational: false,
	  nameFrom: ['author'],
	  prohibitedProps: [],
	  props: {
	    'aria-disabled': null
	  },
	  relatedConcepts: [{
	    concept: {
	      name: 'input'
	    },
	    module: 'XForms'
	  }],
	  requireContextRole: [],
	  requiredContextRole: [],
	  requiredOwnedElements: [],
	  requiredProps: {},
	  superClass: [['roletype', 'widget']]
	};
	var _default$2c = inputRole;
	inputRole$1.default = _default$2c;

	var landmarkRole$1 = {};

	Object.defineProperty(landmarkRole$1, "__esModule", {
	  value: true
	});
	landmarkRole$1.default = void 0;
	var landmarkRole = {
	  abstract: true,
	  accessibleNameRequired: false,
	  baseConcepts: [],
	  childrenPresentational: false,
	  nameFrom: ['author'],
	  prohibitedProps: [],
	  props: {},
	  relatedConcepts: [],
	  requireContextRole: [],
	  requiredContextRole: [],
	  requiredOwnedElements: [],
	  requiredProps: {},
	  superClass: [['roletype', 'structure', 'section']]
	};
	var _default$2b = landmarkRole;
	landmarkRole$1.default = _default$2b;

	var rangeRole$1 = {};

	Object.defineProperty(rangeRole$1, "__esModule", {
	  value: true
	});
	rangeRole$1.default = void 0;
	var rangeRole = {
	  abstract: true,
	  accessibleNameRequired: false,
	  baseConcepts: [],
	  childrenPresentational: false,
	  nameFrom: ['author'],
	  prohibitedProps: [],
	  props: {
	    'aria-valuemax': null,
	    'aria-valuemin': null,
	    'aria-valuenow': null
	  },
	  relatedConcepts: [],
	  requireContextRole: [],
	  requiredContextRole: [],
	  requiredOwnedElements: [],
	  requiredProps: {},
	  superClass: [['roletype', 'structure']]
	};
	var _default$2a = rangeRole;
	rangeRole$1.default = _default$2a;

	var roletypeRole$1 = {};

	Object.defineProperty(roletypeRole$1, "__esModule", {
	  value: true
	});
	roletypeRole$1.default = void 0;
	var roletypeRole = {
	  abstract: true,
	  accessibleNameRequired: false,
	  baseConcepts: [],
	  childrenPresentational: false,
	  nameFrom: [],
	  prohibitedProps: [],
	  props: {
	    'aria-atomic': null,
	    'aria-busy': null,
	    'aria-controls': null,
	    'aria-current': null,
	    'aria-describedby': null,
	    'aria-details': null,
	    'aria-dropeffect': null,
	    'aria-flowto': null,
	    'aria-grabbed': null,
	    'aria-hidden': null,
	    'aria-keyshortcuts': null,
	    'aria-label': null,
	    'aria-labelledby': null,
	    'aria-live': null,
	    'aria-owns': null,
	    'aria-relevant': null,
	    'aria-roledescription': null
	  },
	  relatedConcepts: [{
	    concept: {
	      name: 'rel'
	    },
	    module: 'HTML'
	  }, {
	    concept: {
	      name: 'role'
	    },
	    module: 'XHTML'
	  }, {
	    concept: {
	      name: 'type'
	    },
	    module: 'Dublin Core'
	  }],
	  requireContextRole: [],
	  requiredContextRole: [],
	  requiredOwnedElements: [],
	  requiredProps: {},
	  superClass: []
	};
	var _default$29 = roletypeRole;
	roletypeRole$1.default = _default$29;

	var sectionRole$1 = {};

	Object.defineProperty(sectionRole$1, "__esModule", {
	  value: true
	});
	sectionRole$1.default = void 0;
	var sectionRole = {
	  abstract: true,
	  accessibleNameRequired: false,
	  baseConcepts: [],
	  childrenPresentational: false,
	  nameFrom: [],
	  prohibitedProps: [],
	  props: {},
	  relatedConcepts: [{
	    concept: {
	      name: 'frontmatter'
	    },
	    module: 'DTB'
	  }, {
	    concept: {
	      name: 'level'
	    },
	    module: 'DTB'
	  }, {
	    concept: {
	      name: 'level'
	    },
	    module: 'SMIL'
	  }],
	  requireContextRole: [],
	  requiredContextRole: [],
	  requiredOwnedElements: [],
	  requiredProps: {},
	  superClass: [['roletype', 'structure']]
	};
	var _default$28 = sectionRole;
	sectionRole$1.default = _default$28;

	var sectionheadRole$1 = {};

	Object.defineProperty(sectionheadRole$1, "__esModule", {
	  value: true
	});
	sectionheadRole$1.default = void 0;
	var sectionheadRole = {
	  abstract: true,
	  accessibleNameRequired: false,
	  baseConcepts: [],
	  childrenPresentational: false,
	  nameFrom: ['author', 'contents'],
	  prohibitedProps: [],
	  props: {},
	  relatedConcepts: [],
	  requireContextRole: [],
	  requiredContextRole: [],
	  requiredOwnedElements: [],
	  requiredProps: {},
	  superClass: [['roletype', 'structure']]
	};
	var _default$27 = sectionheadRole;
	sectionheadRole$1.default = _default$27;

	var selectRole$1 = {};

	Object.defineProperty(selectRole$1, "__esModule", {
	  value: true
	});
	selectRole$1.default = void 0;
	var selectRole = {
	  abstract: true,
	  accessibleNameRequired: false,
	  baseConcepts: [],
	  childrenPresentational: false,
	  nameFrom: ['author'],
	  prohibitedProps: [],
	  props: {
	    'aria-orientation': null
	  },
	  relatedConcepts: [],
	  requireContextRole: [],
	  requiredContextRole: [],
	  requiredOwnedElements: [],
	  requiredProps: {},
	  superClass: [['roletype', 'widget', 'composite'], ['roletype', 'structure', 'section', 'group']]
	};
	var _default$26 = selectRole;
	selectRole$1.default = _default$26;

	var structureRole$1 = {};

	Object.defineProperty(structureRole$1, "__esModule", {
	  value: true
	});
	structureRole$1.default = void 0;
	var structureRole = {
	  abstract: true,
	  accessibleNameRequired: false,
	  baseConcepts: [],
	  childrenPresentational: false,
	  nameFrom: [],
	  prohibitedProps: [],
	  props: {},
	  relatedConcepts: [],
	  requireContextRole: [],
	  requiredContextRole: [],
	  requiredOwnedElements: [],
	  requiredProps: {},
	  superClass: [['roletype']]
	};
	var _default$25 = structureRole;
	structureRole$1.default = _default$25;

	var widgetRole$1 = {};

	Object.defineProperty(widgetRole$1, "__esModule", {
	  value: true
	});
	widgetRole$1.default = void 0;
	var widgetRole = {
	  abstract: true,
	  accessibleNameRequired: false,
	  baseConcepts: [],
	  childrenPresentational: false,
	  nameFrom: [],
	  prohibitedProps: [],
	  props: {},
	  relatedConcepts: [],
	  requireContextRole: [],
	  requiredContextRole: [],
	  requiredOwnedElements: [],
	  requiredProps: {},
	  superClass: [['roletype']]
	};
	var _default$24 = widgetRole;
	widgetRole$1.default = _default$24;

	var windowRole$1 = {};

	Object.defineProperty(windowRole$1, "__esModule", {
	  value: true
	});
	windowRole$1.default = void 0;
	var windowRole = {
	  abstract: true,
	  accessibleNameRequired: false,
	  baseConcepts: [],
	  childrenPresentational: false,
	  nameFrom: ['author'],
	  prohibitedProps: [],
	  props: {
	    'aria-modal': null
	  },
	  relatedConcepts: [],
	  requireContextRole: [],
	  requiredContextRole: [],
	  requiredOwnedElements: [],
	  requiredProps: {},
	  superClass: [['roletype']]
	};
	var _default$23 = windowRole;
	windowRole$1.default = _default$23;

	Object.defineProperty(ariaAbstractRoles$1, "__esModule", {
	  value: true
	});
	ariaAbstractRoles$1.default = void 0;
	var _commandRole = _interopRequireDefault$7(commandRole$1);
	var _compositeRole = _interopRequireDefault$7(compositeRole$1);
	var _inputRole = _interopRequireDefault$7(inputRole$1);
	var _landmarkRole = _interopRequireDefault$7(landmarkRole$1);
	var _rangeRole = _interopRequireDefault$7(rangeRole$1);
	var _roletypeRole = _interopRequireDefault$7(roletypeRole$1);
	var _sectionRole = _interopRequireDefault$7(sectionRole$1);
	var _sectionheadRole = _interopRequireDefault$7(sectionheadRole$1);
	var _selectRole = _interopRequireDefault$7(selectRole$1);
	var _structureRole = _interopRequireDefault$7(structureRole$1);
	var _widgetRole = _interopRequireDefault$7(widgetRole$1);
	var _windowRole = _interopRequireDefault$7(windowRole$1);
	function _interopRequireDefault$7(obj) {
	  return obj && obj.__esModule ? obj : {
	    default: obj
	  };
	}
	var ariaAbstractRoles = [['command', _commandRole.default], ['composite', _compositeRole.default], ['input', _inputRole.default], ['landmark', _landmarkRole.default], ['range', _rangeRole.default], ['roletype', _roletypeRole.default], ['section', _sectionRole.default], ['sectionhead', _sectionheadRole.default], ['select', _selectRole.default], ['structure', _structureRole.default], ['widget', _widgetRole.default], ['window', _windowRole.default]];
	var _default$22 = ariaAbstractRoles;
	ariaAbstractRoles$1.default = _default$22;

	var ariaLiteralRoles$1 = {};

	var alertRole$1 = {};

	Object.defineProperty(alertRole$1, "__esModule", {
	  value: true
	});
	alertRole$1.default = void 0;
	var alertRole = {
	  abstract: false,
	  accessibleNameRequired: false,
	  baseConcepts: [],
	  childrenPresentational: false,
	  nameFrom: ['author'],
	  prohibitedProps: [],
	  props: {
	    'aria-atomic': 'true',
	    'aria-live': 'assertive'
	  },
	  relatedConcepts: [{
	    concept: {
	      name: 'alert'
	    },
	    module: 'XForms'
	  }],
	  requireContextRole: [],
	  requiredContextRole: [],
	  requiredOwnedElements: [],
	  requiredProps: {},
	  superClass: [['roletype', 'structure', 'section']]
	};
	var _default$21 = alertRole;
	alertRole$1.default = _default$21;

	var alertdialogRole$1 = {};

	Object.defineProperty(alertdialogRole$1, "__esModule", {
	  value: true
	});
	alertdialogRole$1.default = void 0;
	var alertdialogRole = {
	  abstract: false,
	  accessibleNameRequired: true,
	  baseConcepts: [],
	  childrenPresentational: false,
	  nameFrom: ['author'],
	  prohibitedProps: [],
	  props: {},
	  relatedConcepts: [{
	    concept: {
	      name: 'alert'
	    },
	    module: 'XForms'
	  }],
	  requireContextRole: [],
	  requiredContextRole: [],
	  requiredOwnedElements: [],
	  requiredProps: {},
	  superClass: [['roletype', 'structure', 'section', 'alert'], ['roletype', 'window', 'dialog']]
	};
	var _default$20 = alertdialogRole;
	alertdialogRole$1.default = _default$20;

	var applicationRole$1 = {};

	Object.defineProperty(applicationRole$1, "__esModule", {
	  value: true
	});
	applicationRole$1.default = void 0;
	var applicationRole = {
	  abstract: false,
	  accessibleNameRequired: true,
	  baseConcepts: [],
	  childrenPresentational: false,
	  nameFrom: ['author'],
	  prohibitedProps: [],
	  props: {
	    'aria-activedescendant': null,
	    'aria-disabled': null,
	    'aria-errormessage': null,
	    'aria-expanded': null,
	    'aria-haspopup': null,
	    'aria-invalid': null
	  },
	  relatedConcepts: [{
	    concept: {
	      name: 'Device Independence Delivery Unit'
	    }
	  }],
	  requireContextRole: [],
	  requiredContextRole: [],
	  requiredOwnedElements: [],
	  requiredProps: {},
	  superClass: [['roletype', 'structure']]
	};
	var _default$1$ = applicationRole;
	applicationRole$1.default = _default$1$;

	var articleRole$1 = {};

	Object.defineProperty(articleRole$1, "__esModule", {
	  value: true
	});
	articleRole$1.default = void 0;
	var articleRole = {
	  abstract: false,
	  accessibleNameRequired: false,
	  baseConcepts: [],
	  childrenPresentational: false,
	  nameFrom: ['author'],
	  prohibitedProps: [],
	  props: {
	    'aria-posinset': null,
	    'aria-setsize': null
	  },
	  relatedConcepts: [{
	    concept: {
	      name: 'article'
	    },
	    module: 'HTML'
	  }],
	  requireContextRole: [],
	  requiredContextRole: [],
	  requiredOwnedElements: [],
	  requiredProps: {},
	  superClass: [['roletype', 'structure', 'document']]
	};
	var _default$1_ = articleRole;
	articleRole$1.default = _default$1_;

	var bannerRole$1 = {};

	Object.defineProperty(bannerRole$1, "__esModule", {
	  value: true
	});
	bannerRole$1.default = void 0;
	var bannerRole = {
	  abstract: false,
	  accessibleNameRequired: false,
	  baseConcepts: [],
	  childrenPresentational: false,
	  nameFrom: ['author'],
	  prohibitedProps: [],
	  props: {},
	  relatedConcepts: [{
	    concept: {
	      constraints: ['direct descendant of document'],
	      name: 'header'
	    },
	    module: 'HTML'
	  }],
	  requireContextRole: [],
	  requiredContextRole: [],
	  requiredOwnedElements: [],
	  requiredProps: {},
	  superClass: [['roletype', 'structure', 'section', 'landmark']]
	};
	var _default$1Z = bannerRole;
	bannerRole$1.default = _default$1Z;

	var blockquoteRole$1 = {};

	Object.defineProperty(blockquoteRole$1, "__esModule", {
	  value: true
	});
	blockquoteRole$1.default = void 0;
	var blockquoteRole = {
	  abstract: false,
	  accessibleNameRequired: false,
	  baseConcepts: [],
	  childrenPresentational: false,
	  nameFrom: ['author'],
	  prohibitedProps: [],
	  props: {},
	  relatedConcepts: [],
	  requireContextRole: [],
	  requiredContextRole: [],
	  requiredOwnedElements: [],
	  requiredProps: {},
	  superClass: [['roletype', 'structure', 'section']]
	};
	var _default$1Y = blockquoteRole;
	blockquoteRole$1.default = _default$1Y;

	var buttonRole$1 = {};

	Object.defineProperty(buttonRole$1, "__esModule", {
	  value: true
	});
	buttonRole$1.default = void 0;
	var buttonRole = {
	  abstract: false,
	  accessibleNameRequired: true,
	  baseConcepts: [],
	  childrenPresentational: true,
	  nameFrom: ['author', 'contents'],
	  prohibitedProps: [],
	  props: {
	    'aria-disabled': null,
	    'aria-expanded': null,
	    'aria-haspopup': null,
	    'aria-pressed': null
	  },
	  relatedConcepts: [{
	    concept: {
	      attributes: [{
	        constraints: ['set'],
	        name: 'aria-pressed'
	      }, {
	        name: 'type',
	        value: 'checkbox'
	      }],
	      name: 'input'
	    },
	    module: 'HTML'
	  }, {
	    concept: {
	      attributes: [{
	        name: 'aria-expanded',
	        value: 'false'
	      }],
	      name: 'summary'
	    },
	    module: 'HTML'
	  }, {
	    concept: {
	      attributes: [{
	        name: 'aria-expanded',
	        value: 'true'
	      }],
	      constraints: ['direct descendant of details element with the open attribute defined'],
	      name: 'summary'
	    },
	    module: 'HTML'
	  }, {
	    concept: {
	      attributes: [{
	        name: 'type',
	        value: 'button'
	      }],
	      name: 'input'
	    },
	    module: 'HTML'
	  }, {
	    concept: {
	      attributes: [{
	        name: 'type',
	        value: 'image'
	      }],
	      name: 'input'
	    },
	    module: 'HTML'
	  }, {
	    concept: {
	      attributes: [{
	        name: 'type',
	        value: 'reset'
	      }],
	      name: 'input'
	    },
	    module: 'HTML'
	  }, {
	    concept: {
	      attributes: [{
	        name: 'type',
	        value: 'submit'
	      }],
	      name: 'input'
	    },
	    module: 'HTML'
	  }, {
	    concept: {
	      name: 'button'
	    },
	    module: 'HTML'
	  }, {
	    concept: {
	      name: 'trigger'
	    },
	    module: 'XForms'
	  }],
	  requireContextRole: [],
	  requiredContextRole: [],
	  requiredOwnedElements: [],
	  requiredProps: {},
	  superClass: [['roletype', 'widget', 'command']]
	};
	var _default$1X = buttonRole;
	buttonRole$1.default = _default$1X;

	var captionRole$1 = {};

	Object.defineProperty(captionRole$1, "__esModule", {
	  value: true
	});
	captionRole$1.default = void 0;
	var captionRole = {
	  abstract: false,
	  accessibleNameRequired: false,
	  baseConcepts: [],
	  childrenPresentational: false,
	  nameFrom: ['prohibited'],
	  prohibitedProps: ['aria-label', 'aria-labelledby'],
	  props: {},
	  relatedConcepts: [],
	  requireContextRole: ['figure', 'grid', 'table'],
	  requiredContextRole: ['figure', 'grid', 'table'],
	  requiredOwnedElements: [],
	  requiredProps: {},
	  superClass: [['roletype', 'structure', 'section']]
	};
	var _default$1W = captionRole;
	captionRole$1.default = _default$1W;

	var cellRole$1 = {};

	Object.defineProperty(cellRole$1, "__esModule", {
	  value: true
	});
	cellRole$1.default = void 0;
	var cellRole = {
	  abstract: false,
	  accessibleNameRequired: false,
	  baseConcepts: [],
	  childrenPresentational: false,
	  nameFrom: ['author', 'contents'],
	  prohibitedProps: [],
	  props: {
	    'aria-colindex': null,
	    'aria-colspan': null,
	    'aria-rowindex': null,
	    'aria-rowspan': null
	  },
	  relatedConcepts: [{
	    concept: {
	      constraints: ['descendant of table'],
	      name: 'td'
	    },
	    module: 'HTML'
	  }],
	  requireContextRole: ['row'],
	  requiredContextRole: ['row'],
	  requiredOwnedElements: [],
	  requiredProps: {},
	  superClass: [['roletype', 'structure', 'section']]
	};
	var _default$1V = cellRole;
	cellRole$1.default = _default$1V;

	var checkboxRole$1 = {};

	Object.defineProperty(checkboxRole$1, "__esModule", {
	  value: true
	});
	checkboxRole$1.default = void 0;
	var checkboxRole = {
	  abstract: false,
	  accessibleNameRequired: true,
	  baseConcepts: [],
	  childrenPresentational: true,
	  nameFrom: ['author', 'contents'],
	  prohibitedProps: [],
	  props: {
	    'aria-checked': null,
	    'aria-errormessage': null,
	    'aria-expanded': null,
	    'aria-invalid': null,
	    'aria-readonly': null,
	    'aria-required': null
	  },
	  relatedConcepts: [{
	    concept: {
	      attributes: [{
	        name: 'type',
	        value: 'checkbox'
	      }],
	      name: 'input'
	    },
	    module: 'HTML'
	  }, {
	    concept: {
	      name: 'option'
	    },
	    module: 'ARIA'
	  }],
	  requireContextRole: [],
	  requiredContextRole: [],
	  requiredOwnedElements: [],
	  requiredProps: {
	    'aria-checked': null
	  },
	  superClass: [['roletype', 'widget', 'input']]
	};
	var _default$1U = checkboxRole;
	checkboxRole$1.default = _default$1U;

	var codeRole$1 = {};

	Object.defineProperty(codeRole$1, "__esModule", {
	  value: true
	});
	codeRole$1.default = void 0;
	var codeRole = {
	  abstract: false,
	  accessibleNameRequired: false,
	  baseConcepts: [],
	  childrenPresentational: false,
	  nameFrom: ['prohibited'],
	  prohibitedProps: ['aria-label', 'aria-labelledby'],
	  props: {},
	  relatedConcepts: [],
	  requireContextRole: [],
	  requiredContextRole: [],
	  requiredOwnedElements: [],
	  requiredProps: {},
	  superClass: [['roletype', 'structure', 'section']]
	};
	var _default$1T = codeRole;
	codeRole$1.default = _default$1T;

	var columnheaderRole$1 = {};

	Object.defineProperty(columnheaderRole$1, "__esModule", {
	  value: true
	});
	columnheaderRole$1.default = void 0;
	var columnheaderRole = {
	  abstract: false,
	  accessibleNameRequired: true,
	  baseConcepts: [],
	  childrenPresentational: false,
	  nameFrom: ['author', 'contents'],
	  prohibitedProps: [],
	  props: {
	    'aria-sort': null
	  },
	  relatedConcepts: [{
	    attributes: [{
	      name: 'scope',
	      value: 'col'
	    }],
	    concept: {
	      name: 'th'
	    },
	    module: 'HTML'
	  }],
	  requireContextRole: ['row'],
	  requiredContextRole: ['row'],
	  requiredOwnedElements: [],
	  requiredProps: {},
	  superClass: [['roletype', 'structure', 'section', 'cell'], ['roletype', 'structure', 'section', 'cell', 'gridcell'], ['roletype', 'widget', 'gridcell'], ['roletype', 'structure', 'sectionhead']]
	};
	var _default$1S = columnheaderRole;
	columnheaderRole$1.default = _default$1S;

	var comboboxRole$1 = {};

	Object.defineProperty(comboboxRole$1, "__esModule", {
	  value: true
	});
	comboboxRole$1.default = void 0;
	var comboboxRole = {
	  abstract: false,
	  accessibleNameRequired: true,
	  baseConcepts: [],
	  childrenPresentational: false,
	  nameFrom: ['author'],
	  prohibitedProps: [],
	  props: {
	    'aria-activedescendant': null,
	    'aria-autocomplete': null,
	    'aria-errormessage': null,
	    'aria-invalid': null,
	    'aria-readonly': null,
	    'aria-required': null,
	    'aria-expanded': 'false',
	    'aria-haspopup': 'listbox'
	  },
	  relatedConcepts: [{
	    concept: {
	      attributes: [{
	        constraints: ['set'],
	        name: 'list'
	      }, {
	        name: 'type',
	        value: 'email'
	      }],
	      name: 'input'
	    },
	    module: 'HTML'
	  }, {
	    concept: {
	      attributes: [{
	        constraints: ['set'],
	        name: 'list'
	      }, {
	        name: 'type',
	        value: 'search'
	      }],
	      name: 'input'
	    },
	    module: 'HTML'
	  }, {
	    concept: {
	      attributes: [{
	        constraints: ['set'],
	        name: 'list'
	      }, {
	        name: 'type',
	        value: 'tel'
	      }],
	      name: 'input'
	    },
	    module: 'HTML'
	  }, {
	    concept: {
	      attributes: [{
	        constraints: ['set'],
	        name: 'list'
	      }, {
	        name: 'type',
	        value: 'text'
	      }],
	      name: 'input'
	    },
	    module: 'HTML'
	  }, {
	    concept: {
	      attributes: [{
	        constraints: ['set'],
	        name: 'list'
	      }, {
	        name: 'type',
	        value: 'url'
	      }],
	      name: 'input'
	    },
	    module: 'HTML'
	  }, {
	    concept: {
	      attributes: [{
	        constraints: ['set'],
	        name: 'list'
	      }, {
	        name: 'type',
	        value: 'url'
	      }],
	      name: 'input'
	    },
	    module: 'HTML'
	  }, {
	    concept: {
	      attributes: [{
	        constraints: ['undefined'],
	        name: 'multiple'
	      }, {
	        constraints: ['undefined'],
	        name: 'size'
	      }],
	      name: 'select'
	    },
	    module: 'HTML'
	  }, {
	    concept: {
	      attributes: [{
	        constraints: ['undefined'],
	        name: 'multiple'
	      }, {
	        name: 'size',
	        value: 1
	      }],
	      name: 'select'
	    },
	    module: 'HTML'
	  }, {
	    concept: {
	      name: 'select'
	    },
	    module: 'XForms'
	  }],
	  requireContextRole: [],
	  requiredContextRole: [],
	  requiredOwnedElements: [],
	  requiredProps: {
	    'aria-controls': null,
	    'aria-expanded': 'false'
	  },
	  superClass: [['roletype', 'widget', 'input']]
	};
	var _default$1R = comboboxRole;
	comboboxRole$1.default = _default$1R;

	var complementaryRole$1 = {};

	Object.defineProperty(complementaryRole$1, "__esModule", {
	  value: true
	});
	complementaryRole$1.default = void 0;
	var complementaryRole = {
	  abstract: false,
	  accessibleNameRequired: false,
	  baseConcepts: [],
	  childrenPresentational: false,
	  nameFrom: ['author'],
	  prohibitedProps: [],
	  props: {},
	  relatedConcepts: [{
	    concept: {
	      name: 'aside'
	    },
	    module: 'HTML'
	  }],
	  requireContextRole: [],
	  requiredContextRole: [],
	  requiredOwnedElements: [],
	  requiredProps: {},
	  superClass: [['roletype', 'structure', 'section', 'landmark']]
	};
	var _default$1Q = complementaryRole;
	complementaryRole$1.default = _default$1Q;

	var contentinfoRole$1 = {};

	Object.defineProperty(contentinfoRole$1, "__esModule", {
	  value: true
	});
	contentinfoRole$1.default = void 0;
	var contentinfoRole = {
	  abstract: false,
	  accessibleNameRequired: false,
	  baseConcepts: [],
	  childrenPresentational: false,
	  nameFrom: ['author'],
	  prohibitedProps: [],
	  props: {},
	  relatedConcepts: [{
	    concept: {
	      constraints: ['direct descendant of document'],
	      name: 'footer'
	    },
	    module: 'HTML'
	  }],
	  requireContextRole: [],
	  requiredContextRole: [],
	  requiredOwnedElements: [],
	  requiredProps: {},
	  superClass: [['roletype', 'structure', 'section', 'landmark']]
	};
	var _default$1P = contentinfoRole;
	contentinfoRole$1.default = _default$1P;

	var definitionRole$1 = {};

	Object.defineProperty(definitionRole$1, "__esModule", {
	  value: true
	});
	definitionRole$1.default = void 0;
	var definitionRole = {
	  abstract: false,
	  accessibleNameRequired: false,
	  baseConcepts: [],
	  childrenPresentational: false,
	  nameFrom: ['author'],
	  prohibitedProps: [],
	  props: {},
	  relatedConcepts: [{
	    concept: {
	      name: 'dd'
	    },
	    module: 'HTML'
	  }],
	  requireContextRole: [],
	  requiredContextRole: [],
	  requiredOwnedElements: [],
	  requiredProps: {},
	  superClass: [['roletype', 'structure', 'section']]
	};
	var _default$1O = definitionRole;
	definitionRole$1.default = _default$1O;

	var deletionRole$1 = {};

	Object.defineProperty(deletionRole$1, "__esModule", {
	  value: true
	});
	deletionRole$1.default = void 0;
	var deletionRole = {
	  abstract: false,
	  accessibleNameRequired: false,
	  baseConcepts: [],
	  childrenPresentational: false,
	  nameFrom: ['prohibited'],
	  prohibitedProps: ['aria-label', 'aria-labelledby'],
	  props: {},
	  relatedConcepts: [],
	  requireContextRole: [],
	  requiredContextRole: [],
	  requiredOwnedElements: [],
	  requiredProps: {},
	  superClass: [['roletype', 'structure', 'section']]
	};
	var _default$1N = deletionRole;
	deletionRole$1.default = _default$1N;

	var dialogRole$1 = {};

	Object.defineProperty(dialogRole$1, "__esModule", {
	  value: true
	});
	dialogRole$1.default = void 0;
	var dialogRole = {
	  abstract: false,
	  accessibleNameRequired: true,
	  baseConcepts: [],
	  childrenPresentational: false,
	  nameFrom: ['author'],
	  prohibitedProps: [],
	  props: {},
	  relatedConcepts: [{
	    concept: {
	      name: 'dialog'
	    },
	    module: 'HTML'
	  }],
	  requireContextRole: [],
	  requiredContextRole: [],
	  requiredOwnedElements: [],
	  requiredProps: {},
	  superClass: [['roletype', 'window']]
	};
	var _default$1M = dialogRole;
	dialogRole$1.default = _default$1M;

	var directoryRole$1 = {};

	Object.defineProperty(directoryRole$1, "__esModule", {
	  value: true
	});
	directoryRole$1.default = void 0;
	var directoryRole = {
	  abstract: false,
	  accessibleNameRequired: false,
	  baseConcepts: [],
	  childrenPresentational: false,
	  nameFrom: ['author'],
	  prohibitedProps: [],
	  props: {},
	  relatedConcepts: [{
	    module: 'DAISY Guide'
	  }],
	  requireContextRole: [],
	  requiredContextRole: [],
	  requiredOwnedElements: [],
	  requiredProps: {},
	  superClass: [['roletype', 'structure', 'section', 'list']]
	};
	var _default$1L = directoryRole;
	directoryRole$1.default = _default$1L;

	var documentRole$1 = {};

	Object.defineProperty(documentRole$1, "__esModule", {
	  value: true
	});
	documentRole$1.default = void 0;
	var documentRole = {
	  abstract: false,
	  accessibleNameRequired: false,
	  baseConcepts: [],
	  childrenPresentational: false,
	  nameFrom: ['author'],
	  prohibitedProps: [],
	  props: {},
	  relatedConcepts: [{
	    concept: {
	      name: 'Device Independence Delivery Unit'
	    }
	  }, {
	    concept: {
	      name: 'body'
	    },
	    module: 'HTML'
	  }],
	  requireContextRole: [],
	  requiredContextRole: [],
	  requiredOwnedElements: [],
	  requiredProps: {},
	  superClass: [['roletype', 'structure']]
	};
	var _default$1K = documentRole;
	documentRole$1.default = _default$1K;

	var emphasisRole$1 = {};

	Object.defineProperty(emphasisRole$1, "__esModule", {
	  value: true
	});
	emphasisRole$1.default = void 0;
	var emphasisRole = {
	  abstract: false,
	  accessibleNameRequired: false,
	  baseConcepts: [],
	  childrenPresentational: false,
	  nameFrom: ['prohibited'],
	  prohibitedProps: ['aria-label', 'aria-labelledby'],
	  props: {},
	  relatedConcepts: [],
	  requireContextRole: [],
	  requiredContextRole: [],
	  requiredOwnedElements: [],
	  requiredProps: {},
	  superClass: [['roletype', 'structure', 'section']]
	};
	var _default$1J = emphasisRole;
	emphasisRole$1.default = _default$1J;

	var feedRole$1 = {};

	Object.defineProperty(feedRole$1, "__esModule", {
	  value: true
	});
	feedRole$1.default = void 0;
	var feedRole = {
	  abstract: false,
	  accessibleNameRequired: false,
	  baseConcepts: [],
	  childrenPresentational: false,
	  nameFrom: ['author'],
	  prohibitedProps: [],
	  props: {},
	  relatedConcepts: [],
	  requireContextRole: [],
	  requiredContextRole: [],
	  requiredOwnedElements: [['article']],
	  requiredProps: {},
	  superClass: [['roletype', 'structure', 'section', 'list']]
	};
	var _default$1I = feedRole;
	feedRole$1.default = _default$1I;

	var figureRole$1 = {};

	Object.defineProperty(figureRole$1, "__esModule", {
	  value: true
	});
	figureRole$1.default = void 0;
	var figureRole = {
	  abstract: false,
	  accessibleNameRequired: false,
	  baseConcepts: [],
	  childrenPresentational: false,
	  nameFrom: ['author'],
	  prohibitedProps: [],
	  props: {},
	  relatedConcepts: [{
	    concept: {
	      name: 'figure'
	    },
	    module: 'HTML'
	  }],
	  requireContextRole: [],
	  requiredContextRole: [],
	  requiredOwnedElements: [],
	  requiredProps: {},
	  superClass: [['roletype', 'structure', 'section']]
	};
	var _default$1H = figureRole;
	figureRole$1.default = _default$1H;

	var formRole$1 = {};

	Object.defineProperty(formRole$1, "__esModule", {
	  value: true
	});
	formRole$1.default = void 0;
	var formRole = {
	  abstract: false,
	  accessibleNameRequired: false,
	  baseConcepts: [],
	  childrenPresentational: false,
	  nameFrom: ['author'],
	  prohibitedProps: [],
	  props: {},
	  relatedConcepts: [{
	    concept: {
	      attributes: [{
	        constraints: ['set'],
	        name: 'aria-label'
	      }],
	      name: 'form'
	    },
	    module: 'HTML'
	  }, {
	    concept: {
	      attributes: [{
	        constraints: ['set'],
	        name: 'aria-labelledby'
	      }],
	      name: 'form'
	    },
	    module: 'HTML'
	  }, {
	    concept: {
	      attributes: [{
	        constraints: ['set'],
	        name: 'name'
	      }],
	      name: 'form'
	    },
	    module: 'HTML'
	  }],
	  requireContextRole: [],
	  requiredContextRole: [],
	  requiredOwnedElements: [],
	  requiredProps: {},
	  superClass: [['roletype', 'structure', 'section', 'landmark']]
	};
	var _default$1G = formRole;
	formRole$1.default = _default$1G;

	var genericRole$1 = {};

	Object.defineProperty(genericRole$1, "__esModule", {
	  value: true
	});
	genericRole$1.default = void 0;
	var genericRole = {
	  abstract: false,
	  accessibleNameRequired: false,
	  baseConcepts: [],
	  childrenPresentational: false,
	  nameFrom: ['prohibited'],
	  prohibitedProps: ['aria-label', 'aria-labelledby'],
	  props: {},
	  relatedConcepts: [{
	    concept: {
	      name: 'span'
	    },
	    module: 'HTML'
	  }, {
	    concept: {
	      name: 'div'
	    },
	    module: 'HTML'
	  }],
	  requireContextRole: [],
	  requiredContextRole: [],
	  requiredOwnedElements: [],
	  requiredProps: {},
	  superClass: [['roletype', 'structure']]
	};
	var _default$1F = genericRole;
	genericRole$1.default = _default$1F;

	var gridRole$1 = {};

	Object.defineProperty(gridRole$1, "__esModule", {
	  value: true
	});
	gridRole$1.default = void 0;
	var gridRole = {
	  abstract: false,
	  accessibleNameRequired: true,
	  baseConcepts: [],
	  childrenPresentational: false,
	  nameFrom: ['author'],
	  prohibitedProps: [],
	  props: {
	    'aria-multiselectable': null,
	    'aria-readonly': null
	  },
	  relatedConcepts: [{
	    concept: {
	      attributes: [{
	        name: 'role',
	        value: 'grid'
	      }],
	      name: 'table'
	    },
	    module: 'HTML'
	  }],
	  requireContextRole: [],
	  requiredContextRole: [],
	  requiredOwnedElements: [['row'], ['row', 'rowgroup']],
	  requiredProps: {},
	  superClass: [['roletype', 'widget', 'composite'], ['roletype', 'structure', 'section', 'table']]
	};
	var _default$1E = gridRole;
	gridRole$1.default = _default$1E;

	var gridcellRole$1 = {};

	Object.defineProperty(gridcellRole$1, "__esModule", {
	  value: true
	});
	gridcellRole$1.default = void 0;
	var gridcellRole = {
	  abstract: false,
	  accessibleNameRequired: false,
	  baseConcepts: [],
	  childrenPresentational: false,
	  nameFrom: ['author', 'contents'],
	  prohibitedProps: [],
	  props: {
	    'aria-disabled': null,
	    'aria-errormessage': null,
	    'aria-expanded': null,
	    'aria-haspopup': null,
	    'aria-invalid': null,
	    'aria-readonly': null,
	    'aria-required': null,
	    'aria-selected': null
	  },
	  relatedConcepts: [{
	    concept: {
	      attributes: [{
	        name: 'role',
	        value: 'gridcell'
	      }],
	      name: 'td'
	    },
	    module: 'HTML'
	  }],
	  requireContextRole: ['row'],
	  requiredContextRole: ['row'],
	  requiredOwnedElements: [],
	  requiredProps: {},
	  superClass: [['roletype', 'structure', 'section', 'cell'], ['roletype', 'widget']]
	};
	var _default$1D = gridcellRole;
	gridcellRole$1.default = _default$1D;

	var groupRole$1 = {};

	Object.defineProperty(groupRole$1, "__esModule", {
	  value: true
	});
	groupRole$1.default = void 0;
	var groupRole = {
	  abstract: false,
	  accessibleNameRequired: false,
	  baseConcepts: [],
	  childrenPresentational: false,
	  nameFrom: ['author'],
	  prohibitedProps: [],
	  props: {
	    'aria-activedescendant': null,
	    'aria-disabled': null
	  },
	  relatedConcepts: [{
	    concept: {
	      name: 'details'
	    },
	    module: 'HTML'
	  }, {
	    concept: {
	      name: 'fieldset'
	    },
	    module: 'HTML'
	  }, {
	    concept: {
	      name: 'optgroup'
	    },
	    module: 'HTML'
	  }],
	  requireContextRole: [],
	  requiredContextRole: [],
	  requiredOwnedElements: [],
	  requiredProps: {},
	  superClass: [['roletype', 'structure', 'section']]
	};
	var _default$1C = groupRole;
	groupRole$1.default = _default$1C;

	var headingRole$1 = {};

	Object.defineProperty(headingRole$1, "__esModule", {
	  value: true
	});
	headingRole$1.default = void 0;
	var headingRole = {
	  abstract: false,
	  accessibleNameRequired: true,
	  baseConcepts: [],
	  childrenPresentational: false,
	  nameFrom: ['author', 'contents'],
	  prohibitedProps: [],
	  props: {
	    'aria-level': '2'
	  },
	  relatedConcepts: [{
	    concept: {
	      name: 'h1'
	    },
	    module: 'HTML'
	  }, {
	    concept: {
	      name: 'h2'
	    },
	    module: 'HTML'
	  }, {
	    concept: {
	      name: 'h3'
	    },
	    module: 'HTML'
	  }, {
	    concept: {
	      name: 'h4'
	    },
	    module: 'HTML'
	  }, {
	    concept: {
	      name: 'h5'
	    },
	    module: 'HTML'
	  }, {
	    concept: {
	      name: 'h6'
	    },
	    module: 'HTML'
	  }],
	  requireContextRole: [],
	  requiredContextRole: [],
	  requiredOwnedElements: [],
	  requiredProps: {
	    'aria-level': '2'
	  },
	  superClass: [['roletype', 'structure', 'sectionhead']]
	};
	var _default$1B = headingRole;
	headingRole$1.default = _default$1B;

	var imgRole$1 = {};

	Object.defineProperty(imgRole$1, "__esModule", {
	  value: true
	});
	imgRole$1.default = void 0;
	var imgRole = {
	  abstract: false,
	  accessibleNameRequired: true,
	  baseConcepts: [],
	  childrenPresentational: true,
	  nameFrom: ['author'],
	  prohibitedProps: [],
	  props: {},
	  relatedConcepts: [{
	    concept: {
	      attributes: [{
	        constraints: ['set'],
	        name: 'alt'
	      }],
	      name: 'img'
	    },
	    module: 'HTML'
	  }, {
	    concept: {
	      attributes: [{
	        constraints: ['undefined'],
	        name: 'alt'
	      }],
	      name: 'img'
	    },
	    module: 'HTML'
	  }, {
	    concept: {
	      name: 'imggroup'
	    },
	    module: 'DTB'
	  }],
	  requireContextRole: [],
	  requiredContextRole: [],
	  requiredOwnedElements: [],
	  requiredProps: {},
	  superClass: [['roletype', 'structure', 'section']]
	};
	var _default$1A = imgRole;
	imgRole$1.default = _default$1A;

	var insertionRole$1 = {};

	Object.defineProperty(insertionRole$1, "__esModule", {
	  value: true
	});
	insertionRole$1.default = void 0;
	var insertionRole = {
	  abstract: false,
	  accessibleNameRequired: false,
	  baseConcepts: [],
	  childrenPresentational: false,
	  nameFrom: ['prohibited'],
	  prohibitedProps: ['aria-label', 'aria-labelledby'],
	  props: {},
	  relatedConcepts: [],
	  requireContextRole: [],
	  requiredContextRole: [],
	  requiredOwnedElements: [],
	  requiredProps: {},
	  superClass: [['roletype', 'structure', 'section']]
	};
	var _default$1z = insertionRole;
	insertionRole$1.default = _default$1z;

	var linkRole$1 = {};

	Object.defineProperty(linkRole$1, "__esModule", {
	  value: true
	});
	linkRole$1.default = void 0;
	var linkRole = {
	  abstract: false,
	  accessibleNameRequired: true,
	  baseConcepts: [],
	  childrenPresentational: false,
	  nameFrom: ['author', 'contents'],
	  prohibitedProps: [],
	  props: {
	    'aria-disabled': null,
	    'aria-expanded': null,
	    'aria-haspopup': null
	  },
	  relatedConcepts: [{
	    concept: {
	      attributes: [{
	        name: 'href'
	      }],
	      name: 'a'
	    },
	    module: 'HTML'
	  }, {
	    concept: {
	      attributes: [{
	        name: 'href'
	      }],
	      name: 'area'
	    },
	    module: 'HTML'
	  }, {
	    concept: {
	      attributes: [{
	        name: 'href'
	      }],
	      name: 'link'
	    },
	    module: 'HTML'
	  }],
	  requireContextRole: [],
	  requiredContextRole: [],
	  requiredOwnedElements: [],
	  requiredProps: {},
	  superClass: [['roletype', 'widget', 'command']]
	};
	var _default$1y = linkRole;
	linkRole$1.default = _default$1y;

	var listRole$1 = {};

	Object.defineProperty(listRole$1, "__esModule", {
	  value: true
	});
	listRole$1.default = void 0;
	var listRole = {
	  abstract: false,
	  accessibleNameRequired: false,
	  baseConcepts: [],
	  childrenPresentational: false,
	  nameFrom: ['author'],
	  prohibitedProps: [],
	  props: {},
	  relatedConcepts: [{
	    concept: {
	      name: 'menu'
	    },
	    module: 'HTML'
	  }, {
	    concept: {
	      name: 'ol'
	    },
	    module: 'HTML'
	  }, {
	    concept: {
	      name: 'ul'
	    },
	    module: 'HTML'
	  }],
	  requireContextRole: [],
	  requiredContextRole: [],
	  requiredOwnedElements: [['listitem']],
	  requiredProps: {},
	  superClass: [['roletype', 'structure', 'section']]
	};
	var _default$1x = listRole;
	listRole$1.default = _default$1x;

	var listboxRole$1 = {};

	Object.defineProperty(listboxRole$1, "__esModule", {
	  value: true
	});
	listboxRole$1.default = void 0;
	var listboxRole = {
	  abstract: false,
	  accessibleNameRequired: true,
	  baseConcepts: [],
	  childrenPresentational: false,
	  nameFrom: ['author'],
	  prohibitedProps: [],
	  props: {
	    'aria-errormessage': null,
	    'aria-expanded': null,
	    'aria-invalid': null,
	    'aria-multiselectable': null,
	    'aria-readonly': null,
	    'aria-required': null,
	    'aria-orientation': 'vertical'
	  },
	  relatedConcepts: [{
	    concept: {
	      attributes: [{
	        constraints: ['>1'],
	        name: 'size'
	      }, {
	        name: 'multiple'
	      }],
	      name: 'select'
	    },
	    module: 'HTML'
	  }, {
	    concept: {
	      attributes: [{
	        constraints: ['>1'],
	        name: 'size'
	      }],
	      name: 'select'
	    },
	    module: 'HTML'
	  }, {
	    concept: {
	      attributes: [{
	        name: 'multiple'
	      }],
	      name: 'select'
	    },
	    module: 'HTML'
	  }, {
	    concept: {
	      name: 'datalist'
	    },
	    module: 'HTML'
	  }, {
	    concept: {
	      name: 'list'
	    },
	    module: 'ARIA'
	  }, {
	    concept: {
	      name: 'select'
	    },
	    module: 'XForms'
	  }],
	  requireContextRole: [],
	  requiredContextRole: [],
	  requiredOwnedElements: [['option', 'group'], ['option']],
	  requiredProps: {},
	  superClass: [['roletype', 'widget', 'composite', 'select'], ['roletype', 'structure', 'section', 'group', 'select']]
	};
	var _default$1w = listboxRole;
	listboxRole$1.default = _default$1w;

	var listitemRole$1 = {};

	Object.defineProperty(listitemRole$1, "__esModule", {
	  value: true
	});
	listitemRole$1.default = void 0;
	var listitemRole = {
	  abstract: false,
	  accessibleNameRequired: false,
	  baseConcepts: [],
	  childrenPresentational: false,
	  nameFrom: ['author'],
	  prohibitedProps: [],
	  props: {
	    'aria-level': null,
	    'aria-posinset': null,
	    'aria-setsize': null
	  },
	  relatedConcepts: [{
	    concept: {
	      constraints: ['direct descendant of ol, ul or menu'],
	      name: 'li'
	    },
	    module: 'HTML'
	  }, {
	    concept: {
	      name: 'item'
	    },
	    module: 'XForms'
	  }],
	  requireContextRole: ['directory', 'list'],
	  requiredContextRole: ['directory', 'list'],
	  requiredOwnedElements: [],
	  requiredProps: {},
	  superClass: [['roletype', 'structure', 'section']]
	};
	var _default$1v = listitemRole;
	listitemRole$1.default = _default$1v;

	var logRole$1 = {};

	Object.defineProperty(logRole$1, "__esModule", {
	  value: true
	});
	logRole$1.default = void 0;
	var logRole = {
	  abstract: false,
	  accessibleNameRequired: false,
	  baseConcepts: [],
	  childrenPresentational: false,
	  nameFrom: ['author'],
	  prohibitedProps: [],
	  props: {
	    'aria-live': 'polite'
	  },
	  relatedConcepts: [],
	  requireContextRole: [],
	  requiredContextRole: [],
	  requiredOwnedElements: [],
	  requiredProps: {},
	  superClass: [['roletype', 'structure', 'section']]
	};
	var _default$1u = logRole;
	logRole$1.default = _default$1u;

	var mainRole$1 = {};

	Object.defineProperty(mainRole$1, "__esModule", {
	  value: true
	});
	mainRole$1.default = void 0;
	var mainRole = {
	  abstract: false,
	  accessibleNameRequired: false,
	  baseConcepts: [],
	  childrenPresentational: false,
	  nameFrom: ['author'],
	  prohibitedProps: [],
	  props: {},
	  relatedConcepts: [{
	    concept: {
	      name: 'main'
	    },
	    module: 'HTML'
	  }],
	  requireContextRole: [],
	  requiredContextRole: [],
	  requiredOwnedElements: [],
	  requiredProps: {},
	  superClass: [['roletype', 'structure', 'section', 'landmark']]
	};
	var _default$1t = mainRole;
	mainRole$1.default = _default$1t;

	var marqueeRole$1 = {};

	Object.defineProperty(marqueeRole$1, "__esModule", {
	  value: true
	});
	marqueeRole$1.default = void 0;
	var marqueeRole = {
	  abstract: false,
	  accessibleNameRequired: true,
	  baseConcepts: [],
	  childrenPresentational: false,
	  nameFrom: ['author'],
	  prohibitedProps: [],
	  props: {},
	  relatedConcepts: [],
	  requireContextRole: [],
	  requiredContextRole: [],
	  requiredOwnedElements: [],
	  requiredProps: {},
	  superClass: [['roletype', 'structure', 'section']]
	};
	var _default$1s = marqueeRole;
	marqueeRole$1.default = _default$1s;

	var mathRole$1 = {};

	Object.defineProperty(mathRole$1, "__esModule", {
	  value: true
	});
	mathRole$1.default = void 0;
	var mathRole = {
	  abstract: false,
	  accessibleNameRequired: false,
	  baseConcepts: [],
	  childrenPresentational: false,
	  nameFrom: ['author'],
	  prohibitedProps: [],
	  props: {},
	  relatedConcepts: [{
	    concept: {
	      name: 'math'
	    },
	    module: 'HTML'
	  }],
	  requireContextRole: [],
	  requiredContextRole: [],
	  requiredOwnedElements: [],
	  requiredProps: {},
	  superClass: [['roletype', 'structure', 'section']]
	};
	var _default$1r = mathRole;
	mathRole$1.default = _default$1r;

	var menuRole$1 = {};

	Object.defineProperty(menuRole$1, "__esModule", {
	  value: true
	});
	menuRole$1.default = void 0;
	var menuRole = {
	  abstract: false,
	  accessibleNameRequired: false,
	  baseConcepts: [],
	  childrenPresentational: false,
	  nameFrom: ['author'],
	  prohibitedProps: [],
	  props: {
	    'aria-orientation': 'vertical'
	  },
	  relatedConcepts: [{
	    concept: {
	      name: 'MENU'
	    },
	    module: 'JAPI'
	  }, {
	    concept: {
	      name: 'list'
	    },
	    module: 'ARIA'
	  }, {
	    concept: {
	      name: 'select'
	    },
	    module: 'XForms'
	  }, {
	    concept: {
	      name: 'sidebar'
	    },
	    module: 'DTB'
	  }],
	  requireContextRole: [],
	  requiredContextRole: [],
	  requiredOwnedElements: [['menuitem', 'group'], ['menuitemradio', 'group'], ['menuitemcheckbox', 'group'], ['menuitem'], ['menuitemcheckbox'], ['menuitemradio']],
	  requiredProps: {},
	  superClass: [['roletype', 'widget', 'composite', 'select'], ['roletype', 'structure', 'section', 'group', 'select']]
	};
	var _default$1q = menuRole;
	menuRole$1.default = _default$1q;

	var menubarRole$1 = {};

	Object.defineProperty(menubarRole$1, "__esModule", {
	  value: true
	});
	menubarRole$1.default = void 0;
	var menubarRole = {
	  abstract: false,
	  accessibleNameRequired: false,
	  baseConcepts: [],
	  childrenPresentational: false,
	  nameFrom: ['author'],
	  prohibitedProps: [],
	  props: {
	    'aria-orientation': 'horizontal'
	  },
	  relatedConcepts: [{
	    concept: {
	      name: 'toolbar'
	    },
	    module: 'ARIA'
	  }],
	  requireContextRole: [],
	  requiredContextRole: [],
	  requiredOwnedElements: [['menuitem', 'group'], ['menuitemradio', 'group'], ['menuitemcheckbox', 'group'], ['menuitem'], ['menuitemcheckbox'], ['menuitemradio']],
	  requiredProps: {},
	  superClass: [['roletype', 'widget', 'composite', 'select', 'menu'], ['roletype', 'structure', 'section', 'group', 'select', 'menu']]
	};
	var _default$1p = menubarRole;
	menubarRole$1.default = _default$1p;

	var menuitemRole$1 = {};

	Object.defineProperty(menuitemRole$1, "__esModule", {
	  value: true
	});
	menuitemRole$1.default = void 0;
	var menuitemRole = {
	  abstract: false,
	  accessibleNameRequired: true,
	  baseConcepts: [],
	  childrenPresentational: false,
	  nameFrom: ['author', 'contents'],
	  prohibitedProps: [],
	  props: {
	    'aria-disabled': null,
	    'aria-expanded': null,
	    'aria-haspopup': null,
	    'aria-posinset': null,
	    'aria-setsize': null
	  },
	  relatedConcepts: [{
	    concept: {
	      name: 'MENU_ITEM'
	    },
	    module: 'JAPI'
	  }, {
	    concept: {
	      name: 'listitem'
	    },
	    module: 'ARIA'
	  }, {
	    concept: {
	      name: 'menuitem'
	    },
	    module: 'HTML'
	  }, {
	    concept: {
	      name: 'option'
	    },
	    module: 'ARIA'
	  }],
	  requireContextRole: ['group', 'menu', 'menubar'],
	  requiredContextRole: ['group', 'menu', 'menubar'],
	  requiredOwnedElements: [],
	  requiredProps: {},
	  superClass: [['roletype', 'widget', 'command']]
	};
	var _default$1o = menuitemRole;
	menuitemRole$1.default = _default$1o;

	var menuitemcheckboxRole$1 = {};

	Object.defineProperty(menuitemcheckboxRole$1, "__esModule", {
	  value: true
	});
	menuitemcheckboxRole$1.default = void 0;
	var menuitemcheckboxRole = {
	  abstract: false,
	  accessibleNameRequired: true,
	  baseConcepts: [],
	  childrenPresentational: true,
	  nameFrom: ['author', 'contents'],
	  prohibitedProps: [],
	  props: {},
	  relatedConcepts: [{
	    concept: {
	      name: 'menuitem'
	    },
	    module: 'ARIA'
	  }],
	  requireContextRole: ['group', 'menu', 'menubar'],
	  requiredContextRole: ['group', 'menu', 'menubar'],
	  requiredOwnedElements: [],
	  requiredProps: {
	    'aria-checked': null
	  },
	  superClass: [['roletype', 'widget', 'input', 'checkbox'], ['roletype', 'widget', 'command', 'menuitem']]
	};
	var _default$1n = menuitemcheckboxRole;
	menuitemcheckboxRole$1.default = _default$1n;

	var menuitemradioRole$1 = {};

	Object.defineProperty(menuitemradioRole$1, "__esModule", {
	  value: true
	});
	menuitemradioRole$1.default = void 0;
	var menuitemradioRole = {
	  abstract: false,
	  accessibleNameRequired: true,
	  baseConcepts: [],
	  childrenPresentational: true,
	  nameFrom: ['author', 'contents'],
	  prohibitedProps: [],
	  props: {},
	  relatedConcepts: [{
	    concept: {
	      name: 'menuitem'
	    },
	    module: 'ARIA'
	  }],
	  requireContextRole: ['group', 'menu', 'menubar'],
	  requiredContextRole: ['group', 'menu', 'menubar'],
	  requiredOwnedElements: [],
	  requiredProps: {
	    'aria-checked': null
	  },
	  superClass: [['roletype', 'widget', 'input', 'checkbox', 'menuitemcheckbox'], ['roletype', 'widget', 'command', 'menuitem', 'menuitemcheckbox'], ['roletype', 'widget', 'input', 'radio']]
	};
	var _default$1m = menuitemradioRole;
	menuitemradioRole$1.default = _default$1m;

	var meterRole$1 = {};

	Object.defineProperty(meterRole$1, "__esModule", {
	  value: true
	});
	meterRole$1.default = void 0;
	var meterRole = {
	  abstract: false,
	  accessibleNameRequired: true,
	  baseConcepts: [],
	  childrenPresentational: true,
	  nameFrom: ['author'],
	  prohibitedProps: [],
	  props: {
	    'aria-valuetext': null,
	    'aria-valuemax': '100',
	    'aria-valuemin': '0'
	  },
	  relatedConcepts: [],
	  requireContextRole: [],
	  requiredContextRole: [],
	  requiredOwnedElements: [],
	  requiredProps: {
	    'aria-valuenow': null
	  },
	  superClass: [['roletype', 'structure', 'range']]
	};
	var _default$1l = meterRole;
	meterRole$1.default = _default$1l;

	var navigationRole$1 = {};

	Object.defineProperty(navigationRole$1, "__esModule", {
	  value: true
	});
	navigationRole$1.default = void 0;
	var navigationRole = {
	  abstract: false,
	  accessibleNameRequired: false,
	  baseConcepts: [],
	  childrenPresentational: false,
	  nameFrom: ['author'],
	  prohibitedProps: [],
	  props: {},
	  relatedConcepts: [{
	    concept: {
	      name: 'nav'
	    },
	    module: 'HTML'
	  }],
	  requireContextRole: [],
	  requiredContextRole: [],
	  requiredOwnedElements: [],
	  requiredProps: {},
	  superClass: [['roletype', 'structure', 'section', 'landmark']]
	};
	var _default$1k = navigationRole;
	navigationRole$1.default = _default$1k;

	var noneRole$1 = {};

	Object.defineProperty(noneRole$1, "__esModule", {
	  value: true
	});
	noneRole$1.default = void 0;
	var noneRole = {
	  abstract: false,
	  accessibleNameRequired: false,
	  baseConcepts: [],
	  childrenPresentational: false,
	  nameFrom: [],
	  prohibitedProps: [],
	  props: {},
	  relatedConcepts: [],
	  requireContextRole: [],
	  requiredContextRole: [],
	  requiredOwnedElements: [],
	  requiredProps: {},
	  superClass: []
	};
	var _default$1j = noneRole;
	noneRole$1.default = _default$1j;

	var noteRole$1 = {};

	Object.defineProperty(noteRole$1, "__esModule", {
	  value: true
	});
	noteRole$1.default = void 0;
	var noteRole = {
	  abstract: false,
	  accessibleNameRequired: false,
	  baseConcepts: [],
	  childrenPresentational: false,
	  nameFrom: ['author'],
	  prohibitedProps: [],
	  props: {},
	  relatedConcepts: [],
	  requireContextRole: [],
	  requiredContextRole: [],
	  requiredOwnedElements: [],
	  requiredProps: {},
	  superClass: [['roletype', 'structure', 'section']]
	};
	var _default$1i = noteRole;
	noteRole$1.default = _default$1i;

	var optionRole$1 = {};

	Object.defineProperty(optionRole$1, "__esModule", {
	  value: true
	});
	optionRole$1.default = void 0;
	var optionRole = {
	  abstract: false,
	  accessibleNameRequired: true,
	  baseConcepts: [],
	  childrenPresentational: true,
	  nameFrom: ['author', 'contents'],
	  prohibitedProps: [],
	  props: {
	    'aria-checked': null,
	    'aria-posinset': null,
	    'aria-setsize': null,
	    'aria-selected': 'false'
	  },
	  relatedConcepts: [{
	    concept: {
	      name: 'item'
	    },
	    module: 'XForms'
	  }, {
	    concept: {
	      name: 'listitem'
	    },
	    module: 'ARIA'
	  }, {
	    concept: {
	      name: 'option'
	    },
	    module: 'HTML'
	  }],
	  requireContextRole: [],
	  requiredContextRole: [],
	  requiredOwnedElements: [],
	  requiredProps: {
	    'aria-selected': 'false'
	  },
	  superClass: [['roletype', 'widget', 'input']]
	};
	var _default$1h = optionRole;
	optionRole$1.default = _default$1h;

	var paragraphRole$1 = {};

	Object.defineProperty(paragraphRole$1, "__esModule", {
	  value: true
	});
	paragraphRole$1.default = void 0;
	var paragraphRole = {
	  abstract: false,
	  accessibleNameRequired: false,
	  baseConcepts: [],
	  childrenPresentational: false,
	  nameFrom: ['prohibited'],
	  prohibitedProps: ['aria-label', 'aria-labelledby'],
	  props: {},
	  relatedConcepts: [],
	  requireContextRole: [],
	  requiredContextRole: [],
	  requiredOwnedElements: [],
	  requiredProps: {},
	  superClass: [['roletype', 'structure', 'section']]
	};
	var _default$1g = paragraphRole;
	paragraphRole$1.default = _default$1g;

	var presentationRole$1 = {};

	Object.defineProperty(presentationRole$1, "__esModule", {
	  value: true
	});
	presentationRole$1.default = void 0;
	var presentationRole = {
	  abstract: false,
	  accessibleNameRequired: false,
	  baseConcepts: [],
	  childrenPresentational: false,
	  nameFrom: ['prohibited'],
	  prohibitedProps: ['aria-label', 'aria-labelledby'],
	  props: {},
	  relatedConcepts: [],
	  requireContextRole: [],
	  requiredContextRole: [],
	  requiredOwnedElements: [],
	  requiredProps: {},
	  superClass: [['roletype', 'structure']]
	};
	var _default$1f = presentationRole;
	presentationRole$1.default = _default$1f;

	var progressbarRole$1 = {};

	Object.defineProperty(progressbarRole$1, "__esModule", {
	  value: true
	});
	progressbarRole$1.default = void 0;
	var progressbarRole = {
	  abstract: false,
	  accessibleNameRequired: true,
	  baseConcepts: [],
	  childrenPresentational: true,
	  nameFrom: ['author'],
	  prohibitedProps: [],
	  props: {
	    'aria-valuetext': null
	  },
	  relatedConcepts: [{
	    concept: {
	      name: 'progress'
	    },
	    module: 'HTML'
	  }, {
	    concept: {
	      name: 'status'
	    },
	    module: 'ARIA'
	  }],
	  requireContextRole: [],
	  requiredContextRole: [],
	  requiredOwnedElements: [],
	  requiredProps: {},
	  superClass: [['roletype', 'structure', 'range'], ['roletype', 'widget']]
	};
	var _default$1e = progressbarRole;
	progressbarRole$1.default = _default$1e;

	var radioRole$1 = {};

	Object.defineProperty(radioRole$1, "__esModule", {
	  value: true
	});
	radioRole$1.default = void 0;
	var radioRole = {
	  abstract: false,
	  accessibleNameRequired: true,
	  baseConcepts: [],
	  childrenPresentational: true,
	  nameFrom: ['author', 'contents'],
	  prohibitedProps: [],
	  props: {
	    'aria-checked': null,
	    'aria-posinset': null,
	    'aria-setsize': null
	  },
	  relatedConcepts: [{
	    concept: {
	      attributes: [{
	        name: 'type',
	        value: 'radio'
	      }],
	      name: 'input'
	    },
	    module: 'HTML'
	  }],
	  requireContextRole: [],
	  requiredContextRole: [],
	  requiredOwnedElements: [],
	  requiredProps: {
	    'aria-checked': null
	  },
	  superClass: [['roletype', 'widget', 'input']]
	};
	var _default$1d = radioRole;
	radioRole$1.default = _default$1d;

	var radiogroupRole$1 = {};

	Object.defineProperty(radiogroupRole$1, "__esModule", {
	  value: true
	});
	radiogroupRole$1.default = void 0;
	var radiogroupRole = {
	  abstract: false,
	  accessibleNameRequired: true,
	  baseConcepts: [],
	  childrenPresentational: false,
	  nameFrom: ['author'],
	  prohibitedProps: [],
	  props: {
	    'aria-errormessage': null,
	    'aria-invalid': null,
	    'aria-readonly': null,
	    'aria-required': null
	  },
	  relatedConcepts: [{
	    concept: {
	      name: 'list'
	    },
	    module: 'ARIA'
	  }],
	  requireContextRole: [],
	  requiredContextRole: [],
	  requiredOwnedElements: [['radio']],
	  requiredProps: {},
	  superClass: [['roletype', 'widget', 'composite', 'select'], ['roletype', 'structure', 'section', 'group', 'select']]
	};
	var _default$1c = radiogroupRole;
	radiogroupRole$1.default = _default$1c;

	var regionRole$1 = {};

	Object.defineProperty(regionRole$1, "__esModule", {
	  value: true
	});
	regionRole$1.default = void 0;
	var regionRole = {
	  abstract: false,
	  accessibleNameRequired: true,
	  baseConcepts: [],
	  childrenPresentational: false,
	  nameFrom: ['author'],
	  prohibitedProps: [],
	  props: {},
	  relatedConcepts: [{
	    concept: {
	      attributes: [{
	        constraints: ['set'],
	        name: 'aria-label'
	      }],
	      name: 'section'
	    },
	    module: 'HTML'
	  }, {
	    concept: {
	      attributes: [{
	        constraints: ['set'],
	        name: 'aria-labelledby'
	      }],
	      name: 'section'
	    },
	    module: 'HTML'
	  }, {
	    concept: {
	      name: 'Device Independence Glossart perceivable unit'
	    }
	  }, {
	    concept: {
	      name: 'frame'
	    },
	    module: 'HTML'
	  }],
	  requireContextRole: [],
	  requiredContextRole: [],
	  requiredOwnedElements: [],
	  requiredProps: {},
	  superClass: [['roletype', 'structure', 'section', 'landmark']]
	};
	var _default$1b = regionRole;
	regionRole$1.default = _default$1b;

	var rowRole$1 = {};

	Object.defineProperty(rowRole$1, "__esModule", {
	  value: true
	});
	rowRole$1.default = void 0;
	var rowRole = {
	  abstract: false,
	  accessibleNameRequired: false,
	  baseConcepts: [],
	  childrenPresentational: false,
	  nameFrom: ['author', 'contents'],
	  prohibitedProps: [],
	  props: {
	    'aria-colindex': null,
	    'aria-expanded': null,
	    'aria-level': null,
	    'aria-posinset': null,
	    'aria-rowindex': null,
	    'aria-selected': null,
	    'aria-setsize': null
	  },
	  relatedConcepts: [{
	    concept: {
	      name: 'tr'
	    },
	    module: 'HTML'
	  }],
	  requireContextRole: ['grid', 'rowgroup', 'table', 'treegrid'],
	  requiredContextRole: ['grid', 'rowgroup', 'table', 'treegrid'],
	  requiredOwnedElements: [['cell'], ['columnheader'], ['gridcell'], ['rowheader']],
	  requiredProps: {},
	  superClass: [['roletype', 'structure', 'section', 'group'], ['roletype', 'widget']]
	};
	var _default$1a = rowRole;
	rowRole$1.default = _default$1a;

	var rowgroupRole$1 = {};

	Object.defineProperty(rowgroupRole$1, "__esModule", {
	  value: true
	});
	rowgroupRole$1.default = void 0;
	var rowgroupRole = {
	  abstract: false,
	  accessibleNameRequired: false,
	  baseConcepts: [],
	  childrenPresentational: false,
	  nameFrom: ['author', 'contents'],
	  prohibitedProps: [],
	  props: {},
	  relatedConcepts: [{
	    concept: {
	      name: 'tbody'
	    },
	    module: 'HTML'
	  }, {
	    concept: {
	      name: 'tfoot'
	    },
	    module: 'HTML'
	  }, {
	    concept: {
	      name: 'thead'
	    },
	    module: 'HTML'
	  }],
	  requireContextRole: ['grid', 'table', 'treegrid'],
	  requiredContextRole: ['grid', 'table', 'treegrid'],
	  requiredOwnedElements: [['row']],
	  requiredProps: {},
	  superClass: [['roletype', 'structure']]
	};
	var _default$19 = rowgroupRole;
	rowgroupRole$1.default = _default$19;

	var rowheaderRole$1 = {};

	Object.defineProperty(rowheaderRole$1, "__esModule", {
	  value: true
	});
	rowheaderRole$1.default = void 0;
	var rowheaderRole = {
	  abstract: false,
	  accessibleNameRequired: true,
	  baseConcepts: [],
	  childrenPresentational: false,
	  nameFrom: ['author', 'contents'],
	  prohibitedProps: [],
	  props: {
	    'aria-sort': null
	  },
	  relatedConcepts: [{
	    concept: {
	      attributes: [{
	        name: 'scope',
	        value: 'row'
	      }],
	      name: 'th'
	    },
	    module: 'HTML'
	  }, {
	    concept: {
	      attributes: [{
	        name: 'scope',
	        value: 'rowgroup'
	      }],
	      name: 'th'
	    },
	    module: 'HTML'
	  }],
	  requireContextRole: ['row', 'rowgroup'],
	  requiredContextRole: ['row', 'rowgroup'],
	  requiredOwnedElements: [],
	  requiredProps: {},
	  superClass: [['roletype', 'structure', 'section', 'cell'], ['roletype', 'structure', 'section', 'cell', 'gridcell'], ['roletype', 'widget', 'gridcell'], ['roletype', 'structure', 'sectionhead']]
	};
	var _default$18 = rowheaderRole;
	rowheaderRole$1.default = _default$18;

	var scrollbarRole$1 = {};

	Object.defineProperty(scrollbarRole$1, "__esModule", {
	  value: true
	});
	scrollbarRole$1.default = void 0;
	var scrollbarRole = {
	  abstract: false,
	  accessibleNameRequired: false,
	  baseConcepts: [],
	  childrenPresentational: true,
	  nameFrom: ['author'],
	  prohibitedProps: [],
	  props: {
	    'aria-disabled': null,
	    'aria-valuetext': null,
	    'aria-orientation': 'vertical',
	    'aria-valuemax': '100',
	    'aria-valuemin': '0'
	  },
	  relatedConcepts: [],
	  requireContextRole: [],
	  requiredContextRole: [],
	  requiredOwnedElements: [],
	  requiredProps: {
	    'aria-controls': null,
	    'aria-valuenow': null
	  },
	  superClass: [['roletype', 'structure', 'range'], ['roletype', 'widget']]
	};
	var _default$17 = scrollbarRole;
	scrollbarRole$1.default = _default$17;

	var searchRole$1 = {};

	Object.defineProperty(searchRole$1, "__esModule", {
	  value: true
	});
	searchRole$1.default = void 0;
	var searchRole = {
	  abstract: false,
	  accessibleNameRequired: false,
	  baseConcepts: [],
	  childrenPresentational: false,
	  nameFrom: ['author'],
	  prohibitedProps: [],
	  props: {},
	  relatedConcepts: [],
	  requireContextRole: [],
	  requiredContextRole: [],
	  requiredOwnedElements: [],
	  requiredProps: {},
	  superClass: [['roletype', 'structure', 'section', 'landmark']]
	};
	var _default$16 = searchRole;
	searchRole$1.default = _default$16;

	var searchboxRole$1 = {};

	Object.defineProperty(searchboxRole$1, "__esModule", {
	  value: true
	});
	searchboxRole$1.default = void 0;
	var searchboxRole = {
	  abstract: false,
	  accessibleNameRequired: true,
	  baseConcepts: [],
	  childrenPresentational: false,
	  nameFrom: ['author'],
	  prohibitedProps: [],
	  props: {},
	  relatedConcepts: [{
	    concept: {
	      attributes: [{
	        constraints: ['undefined'],
	        name: 'list'
	      }, {
	        name: 'type',
	        value: 'search'
	      }],
	      name: 'input'
	    },
	    module: 'HTML'
	  }],
	  requireContextRole: [],
	  requiredContextRole: [],
	  requiredOwnedElements: [],
	  requiredProps: {},
	  superClass: [['roletype', 'widget', 'input', 'textbox']]
	};
	var _default$15 = searchboxRole;
	searchboxRole$1.default = _default$15;

	var separatorRole$1 = {};

	Object.defineProperty(separatorRole$1, "__esModule", {
	  value: true
	});
	separatorRole$1.default = void 0;
	var separatorRole = {
	  abstract: false,
	  accessibleNameRequired: false,
	  baseConcepts: [],
	  childrenPresentational: true,
	  nameFrom: ['author'],
	  prohibitedProps: [],
	  props: {
	    'aria-disabled': null,
	    'aria-orientation': 'horizontal',
	    'aria-valuemax': '100',
	    'aria-valuemin': '0',
	    'aria-valuenow': null,
	    'aria-valuetext': null
	  },
	  relatedConcepts: [{
	    concept: {
	      name: 'hr'
	    },
	    module: 'HTML'
	  }],
	  requireContextRole: [],
	  requiredContextRole: [],
	  requiredOwnedElements: [],
	  requiredProps: {},
	  superClass: [['roletype', 'structure']]
	};
	var _default$14 = separatorRole;
	separatorRole$1.default = _default$14;

	var sliderRole$1 = {};

	Object.defineProperty(sliderRole$1, "__esModule", {
	  value: true
	});
	sliderRole$1.default = void 0;
	var sliderRole = {
	  abstract: false,
	  accessibleNameRequired: true,
	  baseConcepts: [],
	  childrenPresentational: true,
	  nameFrom: ['author'],
	  prohibitedProps: [],
	  props: {
	    'aria-errormessage': null,
	    'aria-haspopup': null,
	    'aria-invalid': null,
	    'aria-readonly': null,
	    'aria-valuetext': null,
	    'aria-orientation': 'horizontal',
	    'aria-valuemax': '100',
	    'aria-valuemin': '0'
	  },
	  relatedConcepts: [{
	    concept: {
	      attributes: [{
	        name: 'type',
	        value: 'range'
	      }],
	      name: 'input'
	    },
	    module: 'HTML'
	  }],
	  requireContextRole: [],
	  requiredContextRole: [],
	  requiredOwnedElements: [],
	  requiredProps: {
	    'aria-valuenow': null
	  },
	  superClass: [['roletype', 'widget', 'input'], ['roletype', 'structure', 'range']]
	};
	var _default$13 = sliderRole;
	sliderRole$1.default = _default$13;

	var spinbuttonRole$1 = {};

	Object.defineProperty(spinbuttonRole$1, "__esModule", {
	  value: true
	});
	spinbuttonRole$1.default = void 0;
	var spinbuttonRole = {
	  abstract: false,
	  accessibleNameRequired: true,
	  baseConcepts: [],
	  childrenPresentational: false,
	  nameFrom: ['author'],
	  prohibitedProps: [],
	  props: {
	    'aria-errormessage': null,
	    'aria-invalid': null,
	    'aria-readonly': null,
	    'aria-required': null,
	    'aria-valuetext': null,
	    'aria-valuenow': '0'
	  },
	  relatedConcepts: [{
	    concept: {
	      attributes: [{
	        name: 'type',
	        value: 'number'
	      }],
	      name: 'input'
	    },
	    module: 'HTML'
	  }],
	  requireContextRole: [],
	  requiredContextRole: [],
	  requiredOwnedElements: [],
	  requiredProps: {},
	  superClass: [['roletype', 'widget', 'composite'], ['roletype', 'widget', 'input'], ['roletype', 'structure', 'range']]
	};
	var _default$12 = spinbuttonRole;
	spinbuttonRole$1.default = _default$12;

	var statusRole$1 = {};

	Object.defineProperty(statusRole$1, "__esModule", {
	  value: true
	});
	statusRole$1.default = void 0;
	var statusRole = {
	  abstract: false,
	  accessibleNameRequired: false,
	  baseConcepts: [],
	  childrenPresentational: false,
	  nameFrom: ['author'],
	  prohibitedProps: [],
	  props: {
	    'aria-atomic': 'true',
	    'aria-live': 'polite'
	  },
	  relatedConcepts: [{
	    concept: {
	      name: 'output'
	    },
	    module: 'HTML'
	  }],
	  requireContextRole: [],
	  requiredContextRole: [],
	  requiredOwnedElements: [],
	  requiredProps: {},
	  superClass: [['roletype', 'structure', 'section']]
	};
	var _default$11 = statusRole;
	statusRole$1.default = _default$11;

	var strongRole$1 = {};

	Object.defineProperty(strongRole$1, "__esModule", {
	  value: true
	});
	strongRole$1.default = void 0;
	var strongRole = {
	  abstract: false,
	  accessibleNameRequired: false,
	  baseConcepts: [],
	  childrenPresentational: false,
	  nameFrom: ['prohibited'],
	  prohibitedProps: ['aria-label', 'aria-labelledby'],
	  props: {},
	  relatedConcepts: [],
	  requireContextRole: [],
	  requiredContextRole: [],
	  requiredOwnedElements: [],
	  requiredProps: {},
	  superClass: [['roletype', 'structure', 'section']]
	};
	var _default$10 = strongRole;
	strongRole$1.default = _default$10;

	var subscriptRole$1 = {};

	Object.defineProperty(subscriptRole$1, "__esModule", {
	  value: true
	});
	subscriptRole$1.default = void 0;
	var subscriptRole = {
	  abstract: false,
	  accessibleNameRequired: false,
	  baseConcepts: [],
	  childrenPresentational: false,
	  nameFrom: ['prohibited'],
	  prohibitedProps: ['aria-label', 'aria-labelledby'],
	  props: {},
	  relatedConcepts: [],
	  requireContextRole: [],
	  requiredContextRole: [],
	  requiredOwnedElements: [],
	  requiredProps: {},
	  superClass: [['roletype', 'structure', 'section']]
	};
	var _default$$ = subscriptRole;
	subscriptRole$1.default = _default$$;

	var superscriptRole$1 = {};

	Object.defineProperty(superscriptRole$1, "__esModule", {
	  value: true
	});
	superscriptRole$1.default = void 0;
	var superscriptRole = {
	  abstract: false,
	  accessibleNameRequired: false,
	  baseConcepts: [],
	  childrenPresentational: false,
	  nameFrom: ['prohibited'],
	  prohibitedProps: ['aria-label', 'aria-labelledby'],
	  props: {},
	  relatedConcepts: [],
	  requireContextRole: [],
	  requiredContextRole: [],
	  requiredOwnedElements: [],
	  requiredProps: {},
	  superClass: [['roletype', 'structure', 'section']]
	};
	var _default$_ = superscriptRole;
	superscriptRole$1.default = _default$_;

	var switchRole$1 = {};

	Object.defineProperty(switchRole$1, "__esModule", {
	  value: true
	});
	switchRole$1.default = void 0;
	var switchRole = {
	  abstract: false,
	  accessibleNameRequired: true,
	  baseConcepts: [],
	  childrenPresentational: true,
	  nameFrom: ['author', 'contents'],
	  prohibitedProps: [],
	  props: {},
	  relatedConcepts: [{
	    concept: {
	      name: 'button'
	    },
	    module: 'ARIA'
	  }],
	  requireContextRole: [],
	  requiredContextRole: [],
	  requiredOwnedElements: [],
	  requiredProps: {
	    'aria-checked': null
	  },
	  superClass: [['roletype', 'widget', 'input', 'checkbox']]
	};
	var _default$Z = switchRole;
	switchRole$1.default = _default$Z;

	var tabRole$1 = {};

	Object.defineProperty(tabRole$1, "__esModule", {
	  value: true
	});
	tabRole$1.default = void 0;
	var tabRole = {
	  abstract: false,
	  accessibleNameRequired: false,
	  baseConcepts: [],
	  childrenPresentational: true,
	  nameFrom: ['author', 'contents'],
	  prohibitedProps: [],
	  props: {
	    'aria-disabled': null,
	    'aria-expanded': null,
	    'aria-haspopup': null,
	    'aria-posinset': null,
	    'aria-setsize': null,
	    'aria-selected': 'false'
	  },
	  relatedConcepts: [],
	  requireContextRole: ['tablist'],
	  requiredContextRole: ['tablist'],
	  requiredOwnedElements: [],
	  requiredProps: {},
	  superClass: [['roletype', 'structure', 'sectionhead'], ['roletype', 'widget']]
	};
	var _default$Y = tabRole;
	tabRole$1.default = _default$Y;

	var tableRole$1 = {};

	Object.defineProperty(tableRole$1, "__esModule", {
	  value: true
	});
	tableRole$1.default = void 0;
	var tableRole = {
	  abstract: false,
	  accessibleNameRequired: true,
	  baseConcepts: [],
	  childrenPresentational: false,
	  nameFrom: ['author'],
	  prohibitedProps: [],
	  props: {
	    'aria-colcount': null,
	    'aria-rowcount': null
	  },
	  relatedConcepts: [{
	    concept: {
	      name: 'table'
	    },
	    module: 'HTML'
	  }],
	  requireContextRole: [],
	  requiredContextRole: [],
	  requiredOwnedElements: [['row'], ['row', 'rowgroup']],
	  requiredProps: {},
	  superClass: [['roletype', 'structure', 'section']]
	};
	var _default$X = tableRole;
	tableRole$1.default = _default$X;

	var tablistRole$1 = {};

	Object.defineProperty(tablistRole$1, "__esModule", {
	  value: true
	});
	tablistRole$1.default = void 0;
	var tablistRole = {
	  abstract: false,
	  accessibleNameRequired: false,
	  baseConcepts: [],
	  childrenPresentational: false,
	  nameFrom: ['author'],
	  prohibitedProps: [],
	  props: {
	    'aria-level': null,
	    'aria-multiselectable': null,
	    'aria-orientation': 'horizontal'
	  },
	  relatedConcepts: [{
	    module: 'DAISY',
	    concept: {
	      name: 'guide'
	    }
	  }],
	  requireContextRole: [],
	  requiredContextRole: [],
	  requiredOwnedElements: [['tab']],
	  requiredProps: {},
	  superClass: [['roletype', 'widget', 'composite']]
	};
	var _default$W = tablistRole;
	tablistRole$1.default = _default$W;

	var tabpanelRole$1 = {};

	Object.defineProperty(tabpanelRole$1, "__esModule", {
	  value: true
	});
	tabpanelRole$1.default = void 0;
	var tabpanelRole = {
	  abstract: false,
	  accessibleNameRequired: true,
	  baseConcepts: [],
	  childrenPresentational: false,
	  nameFrom: ['author'],
	  prohibitedProps: [],
	  props: {},
	  relatedConcepts: [],
	  requireContextRole: [],
	  requiredContextRole: [],
	  requiredOwnedElements: [],
	  requiredProps: {},
	  superClass: [['roletype', 'structure', 'section']]
	};
	var _default$V = tabpanelRole;
	tabpanelRole$1.default = _default$V;

	var termRole$1 = {};

	Object.defineProperty(termRole$1, "__esModule", {
	  value: true
	});
	termRole$1.default = void 0;
	var termRole = {
	  abstract: false,
	  accessibleNameRequired: false,
	  baseConcepts: [],
	  childrenPresentational: false,
	  nameFrom: ['author'],
	  prohibitedProps: [],
	  props: {},
	  relatedConcepts: [{
	    concept: {
	      name: 'dfn'
	    },
	    module: 'HTML'
	  }, {
	    concept: {
	      name: 'dt'
	    },
	    module: 'HTML'
	  }],
	  requireContextRole: [],
	  requiredContextRole: [],
	  requiredOwnedElements: [],
	  requiredProps: {},
	  superClass: [['roletype', 'structure', 'section']]
	};
	var _default$U = termRole;
	termRole$1.default = _default$U;

	var textboxRole$1 = {};

	Object.defineProperty(textboxRole$1, "__esModule", {
	  value: true
	});
	textboxRole$1.default = void 0;
	var textboxRole = {
	  abstract: false,
	  accessibleNameRequired: true,
	  baseConcepts: [],
	  childrenPresentational: false,
	  nameFrom: ['author'],
	  prohibitedProps: [],
	  props: {
	    'aria-activedescendant': null,
	    'aria-autocomplete': null,
	    'aria-errormessage': null,
	    'aria-haspopup': null,
	    'aria-invalid': null,
	    'aria-multiline': null,
	    'aria-placeholder': null,
	    'aria-readonly': null,
	    'aria-required': null
	  },
	  relatedConcepts: [{
	    concept: {
	      attributes: [{
	        constraints: ['undefined'],
	        name: 'type'
	      }, {
	        constraints: ['undefined'],
	        name: 'list'
	      }],
	      name: 'input'
	    },
	    module: 'HTML'
	  }, {
	    concept: {
	      attributes: [{
	        constraints: ['undefined'],
	        name: 'list'
	      }, {
	        name: 'type',
	        value: 'email'
	      }],
	      name: 'input'
	    },
	    module: 'HTML'
	  }, {
	    concept: {
	      attributes: [{
	        constraints: ['undefined'],
	        name: 'list'
	      }, {
	        name: 'type',
	        value: 'tel'
	      }],
	      name: 'input'
	    },
	    module: 'HTML'
	  }, {
	    concept: {
	      attributes: [{
	        constraints: ['undefined'],
	        name: 'list'
	      }, {
	        name: 'type',
	        value: 'text'
	      }],
	      name: 'input'
	    },
	    module: 'HTML'
	  }, {
	    concept: {
	      attributes: [{
	        constraints: ['undefined'],
	        name: 'list'
	      }, {
	        name: 'type',
	        value: 'url'
	      }],
	      name: 'input'
	    },
	    module: 'HTML'
	  }, {
	    concept: {
	      name: 'input'
	    },
	    module: 'XForms'
	  }, {
	    concept: {
	      name: 'textarea'
	    },
	    module: 'HTML'
	  }],
	  requireContextRole: [],
	  requiredContextRole: [],
	  requiredOwnedElements: [],
	  requiredProps: {},
	  superClass: [['roletype', 'widget', 'input']]
	};
	var _default$T = textboxRole;
	textboxRole$1.default = _default$T;

	var timeRole$1 = {};

	Object.defineProperty(timeRole$1, "__esModule", {
	  value: true
	});
	timeRole$1.default = void 0;
	var timeRole = {
	  abstract: false,
	  accessibleNameRequired: false,
	  baseConcepts: [],
	  childrenPresentational: false,
	  nameFrom: ['author'],
	  prohibitedProps: [],
	  props: {},
	  relatedConcepts: [],
	  requireContextRole: [],
	  requiredContextRole: [],
	  requiredOwnedElements: [],
	  requiredProps: {},
	  superClass: [['roletype', 'structure', 'section']]
	};
	var _default$S = timeRole;
	timeRole$1.default = _default$S;

	var timerRole$1 = {};

	Object.defineProperty(timerRole$1, "__esModule", {
	  value: true
	});
	timerRole$1.default = void 0;
	var timerRole = {
	  abstract: false,
	  accessibleNameRequired: false,
	  baseConcepts: [],
	  childrenPresentational: false,
	  nameFrom: ['author'],
	  prohibitedProps: [],
	  props: {},
	  relatedConcepts: [],
	  requireContextRole: [],
	  requiredContextRole: [],
	  requiredOwnedElements: [],
	  requiredProps: {},
	  superClass: [['roletype', 'structure', 'section', 'status']]
	};
	var _default$R = timerRole;
	timerRole$1.default = _default$R;

	var toolbarRole$1 = {};

	Object.defineProperty(toolbarRole$1, "__esModule", {
	  value: true
	});
	toolbarRole$1.default = void 0;
	var toolbarRole = {
	  abstract: false,
	  accessibleNameRequired: false,
	  baseConcepts: [],
	  childrenPresentational: false,
	  nameFrom: ['author'],
	  prohibitedProps: [],
	  props: {
	    'aria-orientation': 'horizontal'
	  },
	  relatedConcepts: [{
	    concept: {
	      name: 'menubar'
	    },
	    module: 'ARIA'
	  }],
	  requireContextRole: [],
	  requiredContextRole: [],
	  requiredOwnedElements: [],
	  requiredProps: {},
	  superClass: [['roletype', 'structure', 'section', 'group']]
	};
	var _default$Q = toolbarRole;
	toolbarRole$1.default = _default$Q;

	var tooltipRole$1 = {};

	Object.defineProperty(tooltipRole$1, "__esModule", {
	  value: true
	});
	tooltipRole$1.default = void 0;
	var tooltipRole = {
	  abstract: false,
	  accessibleNameRequired: true,
	  baseConcepts: [],
	  childrenPresentational: false,
	  nameFrom: ['author', 'contents'],
	  prohibitedProps: [],
	  props: {},
	  relatedConcepts: [],
	  requireContextRole: [],
	  requiredContextRole: [],
	  requiredOwnedElements: [],
	  requiredProps: {},
	  superClass: [['roletype', 'structure', 'section']]
	};
	var _default$P = tooltipRole;
	tooltipRole$1.default = _default$P;

	var treeRole$1 = {};

	Object.defineProperty(treeRole$1, "__esModule", {
	  value: true
	});
	treeRole$1.default = void 0;
	var treeRole = {
	  abstract: false,
	  accessibleNameRequired: true,
	  baseConcepts: [],
	  childrenPresentational: false,
	  nameFrom: ['author'],
	  prohibitedProps: [],
	  props: {
	    'aria-errormessage': null,
	    'aria-invalid': null,
	    'aria-multiselectable': null,
	    'aria-required': null,
	    'aria-orientation': 'vertical'
	  },
	  relatedConcepts: [],
	  requireContextRole: [],
	  requiredContextRole: [],
	  requiredOwnedElements: [['treeitem', 'group'], ['treeitem']],
	  requiredProps: {},
	  superClass: [['roletype', 'widget', 'composite', 'select'], ['roletype', 'structure', 'section', 'group', 'select']]
	};
	var _default$O = treeRole;
	treeRole$1.default = _default$O;

	var treegridRole$1 = {};

	Object.defineProperty(treegridRole$1, "__esModule", {
	  value: true
	});
	treegridRole$1.default = void 0;
	var treegridRole = {
	  abstract: false,
	  accessibleNameRequired: true,
	  baseConcepts: [],
	  childrenPresentational: false,
	  nameFrom: ['author'],
	  prohibitedProps: [],
	  props: {},
	  relatedConcepts: [],
	  requireContextRole: [],
	  requiredContextRole: [],
	  requiredOwnedElements: [['row'], ['row', 'rowgroup']],
	  requiredProps: {},
	  superClass: [['roletype', 'widget', 'composite', 'grid'], ['roletype', 'structure', 'section', 'table', 'grid'], ['roletype', 'widget', 'composite', 'select', 'tree'], ['roletype', 'structure', 'section', 'group', 'select', 'tree']]
	};
	var _default$N = treegridRole;
	treegridRole$1.default = _default$N;

	var treeitemRole$1 = {};

	Object.defineProperty(treeitemRole$1, "__esModule", {
	  value: true
	});
	treeitemRole$1.default = void 0;
	var treeitemRole = {
	  abstract: false,
	  accessibleNameRequired: true,
	  baseConcepts: [],
	  childrenPresentational: false,
	  nameFrom: ['author', 'contents'],
	  prohibitedProps: [],
	  props: {
	    'aria-expanded': null,
	    'aria-haspopup': null
	  },
	  relatedConcepts: [],
	  requireContextRole: ['group', 'tree'],
	  requiredContextRole: ['group', 'tree'],
	  requiredOwnedElements: [],
	  requiredProps: {
	    'aria-selected': null
	  },
	  superClass: [['roletype', 'structure', 'section', 'listitem'], ['roletype', 'widget', 'input', 'option']]
	};
	var _default$M = treeitemRole;
	treeitemRole$1.default = _default$M;

	Object.defineProperty(ariaLiteralRoles$1, "__esModule", {
	  value: true
	});
	ariaLiteralRoles$1.default = void 0;
	var _alertRole = _interopRequireDefault$6(alertRole$1);
	var _alertdialogRole = _interopRequireDefault$6(alertdialogRole$1);
	var _applicationRole = _interopRequireDefault$6(applicationRole$1);
	var _articleRole = _interopRequireDefault$6(articleRole$1);
	var _bannerRole = _interopRequireDefault$6(bannerRole$1);
	var _blockquoteRole = _interopRequireDefault$6(blockquoteRole$1);
	var _buttonRole = _interopRequireDefault$6(buttonRole$1);
	var _captionRole = _interopRequireDefault$6(captionRole$1);
	var _cellRole = _interopRequireDefault$6(cellRole$1);
	var _checkboxRole = _interopRequireDefault$6(checkboxRole$1);
	var _codeRole = _interopRequireDefault$6(codeRole$1);
	var _columnheaderRole = _interopRequireDefault$6(columnheaderRole$1);
	var _comboboxRole = _interopRequireDefault$6(comboboxRole$1);
	var _complementaryRole = _interopRequireDefault$6(complementaryRole$1);
	var _contentinfoRole = _interopRequireDefault$6(contentinfoRole$1);
	var _definitionRole = _interopRequireDefault$6(definitionRole$1);
	var _deletionRole = _interopRequireDefault$6(deletionRole$1);
	var _dialogRole = _interopRequireDefault$6(dialogRole$1);
	var _directoryRole = _interopRequireDefault$6(directoryRole$1);
	var _documentRole = _interopRequireDefault$6(documentRole$1);
	var _emphasisRole = _interopRequireDefault$6(emphasisRole$1);
	var _feedRole = _interopRequireDefault$6(feedRole$1);
	var _figureRole = _interopRequireDefault$6(figureRole$1);
	var _formRole = _interopRequireDefault$6(formRole$1);
	var _genericRole = _interopRequireDefault$6(genericRole$1);
	var _gridRole = _interopRequireDefault$6(gridRole$1);
	var _gridcellRole = _interopRequireDefault$6(gridcellRole$1);
	var _groupRole = _interopRequireDefault$6(groupRole$1);
	var _headingRole = _interopRequireDefault$6(headingRole$1);
	var _imgRole = _interopRequireDefault$6(imgRole$1);
	var _insertionRole = _interopRequireDefault$6(insertionRole$1);
	var _linkRole = _interopRequireDefault$6(linkRole$1);
	var _listRole = _interopRequireDefault$6(listRole$1);
	var _listboxRole = _interopRequireDefault$6(listboxRole$1);
	var _listitemRole = _interopRequireDefault$6(listitemRole$1);
	var _logRole = _interopRequireDefault$6(logRole$1);
	var _mainRole = _interopRequireDefault$6(mainRole$1);
	var _marqueeRole = _interopRequireDefault$6(marqueeRole$1);
	var _mathRole = _interopRequireDefault$6(mathRole$1);
	var _menuRole = _interopRequireDefault$6(menuRole$1);
	var _menubarRole = _interopRequireDefault$6(menubarRole$1);
	var _menuitemRole = _interopRequireDefault$6(menuitemRole$1);
	var _menuitemcheckboxRole = _interopRequireDefault$6(menuitemcheckboxRole$1);
	var _menuitemradioRole = _interopRequireDefault$6(menuitemradioRole$1);
	var _meterRole = _interopRequireDefault$6(meterRole$1);
	var _navigationRole = _interopRequireDefault$6(navigationRole$1);
	var _noneRole = 